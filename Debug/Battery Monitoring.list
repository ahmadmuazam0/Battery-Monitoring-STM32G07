
Battery Monitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000380c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080038c4  080038c4  000138c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003958  08003958  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003958  08003958  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003958  08003958  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003958  08003958  00013958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000000c  0800396c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  0800396c  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf11  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022dd  00000000  00000000  0002cf45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  0002f228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  0002ffe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016502  00000000  00000000  00030c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe43  00000000  00000000  00047172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e8bc  00000000  00000000  00056fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5871  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003074  00000000  00000000  000e58c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080038ac 	.word	0x080038ac

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080038ac 	.word	0x080038ac

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	0018      	movs	r0, r3
 8000222:	230c      	movs	r3, #12
 8000224:	001a      	movs	r2, r3
 8000226:	2100      	movs	r1, #0
 8000228:	f003 fb38 	bl	800389c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800022c:	4b2d      	ldr	r3, [pc, #180]	; (80002e4 <MX_ADC1_Init+0xcc>)
 800022e:	4a2e      	ldr	r2, [pc, #184]	; (80002e8 <MX_ADC1_Init+0xd0>)
 8000230:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000232:	4b2c      	ldr	r3, [pc, #176]	; (80002e4 <MX_ADC1_Init+0xcc>)
 8000234:	2280      	movs	r2, #128	; 0x80
 8000236:	05d2      	lsls	r2, r2, #23
 8000238:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800023a:	4b2a      	ldr	r3, [pc, #168]	; (80002e4 <MX_ADC1_Init+0xcc>)
 800023c:	2200      	movs	r2, #0
 800023e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000240:	4b28      	ldr	r3, [pc, #160]	; (80002e4 <MX_ADC1_Init+0xcc>)
 8000242:	2200      	movs	r2, #0
 8000244:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000246:	4b27      	ldr	r3, [pc, #156]	; (80002e4 <MX_ADC1_Init+0xcc>)
 8000248:	2200      	movs	r2, #0
 800024a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800024c:	4b25      	ldr	r3, [pc, #148]	; (80002e4 <MX_ADC1_Init+0xcc>)
 800024e:	2204      	movs	r2, #4
 8000250:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000252:	4b24      	ldr	r3, [pc, #144]	; (80002e4 <MX_ADC1_Init+0xcc>)
 8000254:	2200      	movs	r2, #0
 8000256:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000258:	4b22      	ldr	r3, [pc, #136]	; (80002e4 <MX_ADC1_Init+0xcc>)
 800025a:	2200      	movs	r2, #0
 800025c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800025e:	4b21      	ldr	r3, [pc, #132]	; (80002e4 <MX_ADC1_Init+0xcc>)
 8000260:	2200      	movs	r2, #0
 8000262:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000264:	4b1f      	ldr	r3, [pc, #124]	; (80002e4 <MX_ADC1_Init+0xcc>)
 8000266:	2201      	movs	r2, #1
 8000268:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800026a:	4b1e      	ldr	r3, [pc, #120]	; (80002e4 <MX_ADC1_Init+0xcc>)
 800026c:	2220      	movs	r2, #32
 800026e:	2100      	movs	r1, #0
 8000270:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000272:	4b1c      	ldr	r3, [pc, #112]	; (80002e4 <MX_ADC1_Init+0xcc>)
 8000274:	2200      	movs	r2, #0
 8000276:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000278:	4b1a      	ldr	r3, [pc, #104]	; (80002e4 <MX_ADC1_Init+0xcc>)
 800027a:	2200      	movs	r2, #0
 800027c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800027e:	4b19      	ldr	r3, [pc, #100]	; (80002e4 <MX_ADC1_Init+0xcc>)
 8000280:	222c      	movs	r2, #44	; 0x2c
 8000282:	2100      	movs	r1, #0
 8000284:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000286:	4b17      	ldr	r3, [pc, #92]	; (80002e4 <MX_ADC1_Init+0xcc>)
 8000288:	2200      	movs	r2, #0
 800028a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800028c:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <MX_ADC1_Init+0xcc>)
 800028e:	2200      	movs	r2, #0
 8000290:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000292:	4b14      	ldr	r3, [pc, #80]	; (80002e4 <MX_ADC1_Init+0xcc>)
 8000294:	2200      	movs	r2, #0
 8000296:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000298:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <MX_ADC1_Init+0xcc>)
 800029a:	223c      	movs	r2, #60	; 0x3c
 800029c:	2100      	movs	r1, #0
 800029e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <MX_ADC1_Init+0xcc>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002a6:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <MX_ADC1_Init+0xcc>)
 80002a8:	0018      	movs	r0, r3
 80002aa:	f000 fe33 	bl	8000f14 <HAL_ADC_Init>
 80002ae:	1e03      	subs	r3, r0, #0
 80002b0:	d001      	beq.n	80002b6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80002b2:	f000 f9e6 	bl	8000682 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4a0c      	ldr	r2, [pc, #48]	; (80002ec <MX_ADC1_Init+0xd4>)
 80002ba:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2200      	movs	r2, #0
 80002c0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2200      	movs	r2, #0
 80002c6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c8:	1d3a      	adds	r2, r7, #4
 80002ca:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <MX_ADC1_Init+0xcc>)
 80002cc:	0011      	movs	r1, r2
 80002ce:	0018      	movs	r0, r3
 80002d0:	f001 f8f8 	bl	80014c4 <HAL_ADC_ConfigChannel>
 80002d4:	1e03      	subs	r3, r0, #0
 80002d6:	d001      	beq.n	80002dc <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80002d8:	f000 f9d3 	bl	8000682 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002dc:	46c0      	nop			; (mov r8, r8)
 80002de:	46bd      	mov	sp, r7
 80002e0:	b004      	add	sp, #16
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000028 	.word	0x20000028
 80002e8:	40012400 	.word	0x40012400
 80002ec:	04000002 	.word	0x04000002

080002f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002f0:	b590      	push	{r4, r7, lr}
 80002f2:	b08b      	sub	sp, #44	; 0x2c
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f8:	2414      	movs	r4, #20
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	0018      	movs	r0, r3
 80002fe:	2314      	movs	r3, #20
 8000300:	001a      	movs	r2, r3
 8000302:	2100      	movs	r1, #0
 8000304:	f003 faca 	bl	800389c <memset>
  if(adcHandle->Instance==ADC1)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a1c      	ldr	r2, [pc, #112]	; (8000380 <HAL_ADC_MspInit+0x90>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d131      	bne.n	8000376 <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000312:	4b1c      	ldr	r3, [pc, #112]	; (8000384 <HAL_ADC_MspInit+0x94>)
 8000314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000316:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <HAL_ADC_MspInit+0x94>)
 8000318:	2180      	movs	r1, #128	; 0x80
 800031a:	0349      	lsls	r1, r1, #13
 800031c:	430a      	orrs	r2, r1
 800031e:	641a      	str	r2, [r3, #64]	; 0x40
 8000320:	4b18      	ldr	r3, [pc, #96]	; (8000384 <HAL_ADC_MspInit+0x94>)
 8000322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000324:	2380      	movs	r3, #128	; 0x80
 8000326:	035b      	lsls	r3, r3, #13
 8000328:	4013      	ands	r3, r2
 800032a:	613b      	str	r3, [r7, #16]
 800032c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800032e:	4b15      	ldr	r3, [pc, #84]	; (8000384 <HAL_ADC_MspInit+0x94>)
 8000330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000332:	4b14      	ldr	r3, [pc, #80]	; (8000384 <HAL_ADC_MspInit+0x94>)
 8000334:	2101      	movs	r1, #1
 8000336:	430a      	orrs	r2, r1
 8000338:	635a      	str	r2, [r3, #52]	; 0x34
 800033a:	4b12      	ldr	r3, [pc, #72]	; (8000384 <HAL_ADC_MspInit+0x94>)
 800033c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800033e:	2201      	movs	r2, #1
 8000340:	4013      	ands	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]
 8000344:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Batt_ADC_Pin;
 8000346:	193b      	adds	r3, r7, r4
 8000348:	2202      	movs	r2, #2
 800034a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800034c:	193b      	adds	r3, r7, r4
 800034e:	2203      	movs	r2, #3
 8000350:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000352:	193b      	adds	r3, r7, r4
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Batt_ADC_GPIO_Port, &GPIO_InitStruct);
 8000358:	193a      	adds	r2, r7, r4
 800035a:	23a0      	movs	r3, #160	; 0xa0
 800035c:	05db      	lsls	r3, r3, #23
 800035e:	0011      	movs	r1, r2
 8000360:	0018      	movs	r0, r3
 8000362:	f001 fd11 	bl	8001d88 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000366:	2200      	movs	r2, #0
 8000368:	2100      	movs	r1, #0
 800036a:	200c      	movs	r0, #12
 800036c:	f001 fb4e 	bl	8001a0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000370:	200c      	movs	r0, #12
 8000372:	f001 fb60 	bl	8001a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	46bd      	mov	sp, r7
 800037a:	b00b      	add	sp, #44	; 0x2c
 800037c:	bd90      	pop	{r4, r7, pc}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	40012400 	.word	0x40012400
 8000384:	40021000 	.word	0x40021000

08000388 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800038e:	4b14      	ldr	r3, [pc, #80]	; (80003e0 <MX_DMA_Init+0x58>)
 8000390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000392:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <MX_DMA_Init+0x58>)
 8000394:	2101      	movs	r1, #1
 8000396:	430a      	orrs	r2, r1
 8000398:	639a      	str	r2, [r3, #56]	; 0x38
 800039a:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <MX_DMA_Init+0x58>)
 800039c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800039e:	2201      	movs	r2, #1
 80003a0:	4013      	ands	r3, r2
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2100      	movs	r1, #0
 80003aa:	2009      	movs	r0, #9
 80003ac:	f001 fb2e 	bl	8001a0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003b0:	2009      	movs	r0, #9
 80003b2:	f001 fb40 	bl	8001a36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2100      	movs	r1, #0
 80003ba:	200a      	movs	r0, #10
 80003bc:	f001 fb26 	bl	8001a0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80003c0:	200a      	movs	r0, #10
 80003c2:	f001 fb38 	bl	8001a36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 80003c6:	2200      	movs	r2, #0
 80003c8:	2100      	movs	r1, #0
 80003ca:	200b      	movs	r0, #11
 80003cc:	f001 fb1e 	bl	8001a0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 80003d0:	200b      	movs	r0, #11
 80003d2:	f001 fb30 	bl	8001a36 <HAL_NVIC_EnableIRQ>

}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	b002      	add	sp, #8
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	40021000 	.word	0x40021000

080003e4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80003e4:	b590      	push	{r4, r7, lr}
 80003e6:	b08b      	sub	sp, #44	; 0x2c
 80003e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ea:	2414      	movs	r4, #20
 80003ec:	193b      	adds	r3, r7, r4
 80003ee:	0018      	movs	r0, r3
 80003f0:	2314      	movs	r3, #20
 80003f2:	001a      	movs	r2, r3
 80003f4:	2100      	movs	r1, #0
 80003f6:	f003 fa51 	bl	800389c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003fa:	4b64      	ldr	r3, [pc, #400]	; (800058c <MX_GPIO_Init+0x1a8>)
 80003fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003fe:	4b63      	ldr	r3, [pc, #396]	; (800058c <MX_GPIO_Init+0x1a8>)
 8000400:	2104      	movs	r1, #4
 8000402:	430a      	orrs	r2, r1
 8000404:	635a      	str	r2, [r3, #52]	; 0x34
 8000406:	4b61      	ldr	r3, [pc, #388]	; (800058c <MX_GPIO_Init+0x1a8>)
 8000408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800040a:	2204      	movs	r2, #4
 800040c:	4013      	ands	r3, r2
 800040e:	613b      	str	r3, [r7, #16]
 8000410:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000412:	4b5e      	ldr	r3, [pc, #376]	; (800058c <MX_GPIO_Init+0x1a8>)
 8000414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000416:	4b5d      	ldr	r3, [pc, #372]	; (800058c <MX_GPIO_Init+0x1a8>)
 8000418:	2120      	movs	r1, #32
 800041a:	430a      	orrs	r2, r1
 800041c:	635a      	str	r2, [r3, #52]	; 0x34
 800041e:	4b5b      	ldr	r3, [pc, #364]	; (800058c <MX_GPIO_Init+0x1a8>)
 8000420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000422:	2220      	movs	r2, #32
 8000424:	4013      	ands	r3, r2
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042a:	4b58      	ldr	r3, [pc, #352]	; (800058c <MX_GPIO_Init+0x1a8>)
 800042c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800042e:	4b57      	ldr	r3, [pc, #348]	; (800058c <MX_GPIO_Init+0x1a8>)
 8000430:	2101      	movs	r1, #1
 8000432:	430a      	orrs	r2, r1
 8000434:	635a      	str	r2, [r3, #52]	; 0x34
 8000436:	4b55      	ldr	r3, [pc, #340]	; (800058c <MX_GPIO_Init+0x1a8>)
 8000438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800043a:	2201      	movs	r2, #1
 800043c:	4013      	ands	r3, r2
 800043e:	60bb      	str	r3, [r7, #8]
 8000440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000442:	4b52      	ldr	r3, [pc, #328]	; (800058c <MX_GPIO_Init+0x1a8>)
 8000444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000446:	4b51      	ldr	r3, [pc, #324]	; (800058c <MX_GPIO_Init+0x1a8>)
 8000448:	2102      	movs	r1, #2
 800044a:	430a      	orrs	r2, r1
 800044c:	635a      	str	r2, [r3, #52]	; 0x34
 800044e:	4b4f      	ldr	r3, [pc, #316]	; (800058c <MX_GPIO_Init+0x1a8>)
 8000450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000452:	2202      	movs	r2, #2
 8000454:	4013      	ands	r3, r2
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800045a:	4b4c      	ldr	r3, [pc, #304]	; (800058c <MX_GPIO_Init+0x1a8>)
 800045c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800045e:	4b4b      	ldr	r3, [pc, #300]	; (800058c <MX_GPIO_Init+0x1a8>)
 8000460:	2108      	movs	r1, #8
 8000462:	430a      	orrs	r2, r1
 8000464:	635a      	str	r2, [r3, #52]	; 0x34
 8000466:	4b49      	ldr	r3, [pc, #292]	; (800058c <MX_GPIO_Init+0x1a8>)
 8000468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800046a:	2208      	movs	r2, #8
 800046c:	4013      	ands	r3, r2
 800046e:	603b      	str	r3, [r7, #0]
 8000470:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 8000472:	23a0      	movs	r3, #160	; 0xa0
 8000474:	05db      	lsls	r3, r3, #23
 8000476:	2200      	movs	r2, #0
 8000478:	213c      	movs	r1, #60	; 0x3c
 800047a:	0018      	movs	r0, r3
 800047c:	f001 fde8 	bl	8002050 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC11 PC12 PC13 PC14
                           PC15 PC0 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000480:	193b      	adds	r3, r7, r4
 8000482:	4a43      	ldr	r2, [pc, #268]	; (8000590 <MX_GPIO_Init+0x1ac>)
 8000484:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000486:	193b      	adds	r3, r7, r4
 8000488:	2203      	movs	r2, #3
 800048a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	193b      	adds	r3, r7, r4
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000492:	193b      	adds	r3, r7, r4
 8000494:	4a3f      	ldr	r2, [pc, #252]	; (8000594 <MX_GPIO_Init+0x1b0>)
 8000496:	0019      	movs	r1, r3
 8000498:	0010      	movs	r0, r2
 800049a:	f001 fc75 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	2203      	movs	r2, #3
 80004a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	2203      	movs	r2, #3
 80004a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	4a39      	ldr	r2, [pc, #228]	; (8000598 <MX_GPIO_Init+0x1b4>)
 80004b4:	0019      	movs	r1, r3
 80004b6:	0010      	movs	r0, r2
 80004b8:	f001 fc66 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Color_Sel_Pin|Mode_Sel_Pin;
 80004bc:	0021      	movs	r1, r4
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2206      	movs	r2, #6
 80004c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2288      	movs	r2, #136	; 0x88
 80004c8:	0352      	lsls	r2, r2, #13
 80004ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	000c      	movs	r4, r1
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	4a2f      	ldr	r2, [pc, #188]	; (8000594 <MX_GPIO_Init+0x1b0>)
 80004d8:	0019      	movs	r1, r3
 80004da:	0010      	movs	r0, r2
 80004dc:	f001 fc54 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	4a2e      	ldr	r2, [pc, #184]	; (800059c <MX_GPIO_Init+0x1b8>)
 80004e4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	2203      	movs	r2, #3
 80004ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f2:	193a      	adds	r2, r7, r4
 80004f4:	23a0      	movs	r3, #160	; 0xa0
 80004f6:	05db      	lsls	r3, r3, #23
 80004f8:	0011      	movs	r1, r2
 80004fa:	0018      	movs	r0, r3
 80004fc:	f001 fc44 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin;
 8000500:	193b      	adds	r3, r7, r4
 8000502:	223c      	movs	r2, #60	; 0x3c
 8000504:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000506:	193b      	adds	r3, r7, r4
 8000508:	2201      	movs	r2, #1
 800050a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	193b      	adds	r3, r7, r4
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000512:	193b      	adds	r3, r7, r4
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000518:	193a      	adds	r2, r7, r4
 800051a:	23a0      	movs	r3, #160	; 0xa0
 800051c:	05db      	lsls	r3, r3, #23
 800051e:	0011      	movs	r1, r2
 8000520:	0018      	movs	r0, r3
 8000522:	f001 fc31 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB12
                           PB13 PB14 PB15 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8000526:	193b      	adds	r3, r7, r4
 8000528:	4a1d      	ldr	r2, [pc, #116]	; (80005a0 <MX_GPIO_Init+0x1bc>)
 800052a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800052c:	193b      	adds	r3, r7, r4
 800052e:	2203      	movs	r2, #3
 8000530:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000538:	193b      	adds	r3, r7, r4
 800053a:	4a1a      	ldr	r2, [pc, #104]	; (80005a4 <MX_GPIO_Init+0x1c0>)
 800053c:	0019      	movs	r1, r3
 800053e:	0010      	movs	r0, r2
 8000540:	f001 fc22 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 PD1
                           PD2 PD3 PD4 PD5
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1
 8000544:	0021      	movs	r1, r4
 8000546:	187b      	adds	r3, r7, r1
 8000548:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <MX_GPIO_Init+0x1c4>)
 800054a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2203      	movs	r2, #3
 8000550:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000558:	187b      	adds	r3, r7, r1
 800055a:	4a14      	ldr	r2, [pc, #80]	; (80005ac <MX_GPIO_Init+0x1c8>)
 800055c:	0019      	movs	r1, r3
 800055e:	0010      	movs	r0, r2
 8000560:	f001 fc12 	bl	8001d88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000564:	2200      	movs	r2, #0
 8000566:	2100      	movs	r1, #0
 8000568:	2005      	movs	r0, #5
 800056a:	f001 fa4f 	bl	8001a0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800056e:	2005      	movs	r0, #5
 8000570:	f001 fa61 	bl	8001a36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	2100      	movs	r1, #0
 8000578:	2006      	movs	r0, #6
 800057a:	f001 fa47 	bl	8001a0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800057e:	2006      	movs	r0, #6
 8000580:	f001 fa59 	bl	8001a36 <HAL_NVIC_EnableIRQ>

}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b00b      	add	sp, #44	; 0x2c
 800058a:	bd90      	pop	{r4, r7, pc}
 800058c:	40021000 	.word	0x40021000
 8000590:	0000fff9 	.word	0x0000fff9
 8000594:	50000800 	.word	0x50000800
 8000598:	50001400 	.word	0x50001400
 800059c:	00009f01 	.word	0x00009f01
 80005a0:	0000fffc 	.word	0x0000fffc
 80005a4:	50000400 	.word	0x50000400
 80005a8:	0000037f 	.word	0x0000037f
 80005ac:	50000c00 	.word	0x50000c00

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 faf6 	bl	8000ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f809 	bl	80005ce <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f7ff ff12 	bl	80003e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c0:	f7ff fee2 	bl	8000388 <MX_DMA_Init>
  MX_TIM3_Init();
 80005c4:	f000 f8ee 	bl	80007a4 <MX_TIM3_Init>
  MX_ADC1_Init();
 80005c8:	f7ff fe26 	bl	8000218 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <main+0x1c>

080005ce <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ce:	b590      	push	{r4, r7, lr}
 80005d0:	b093      	sub	sp, #76	; 0x4c
 80005d2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d4:	2414      	movs	r4, #20
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	0018      	movs	r0, r3
 80005da:	2334      	movs	r3, #52	; 0x34
 80005dc:	001a      	movs	r2, r3
 80005de:	2100      	movs	r1, #0
 80005e0:	f003 f95c 	bl	800389c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	0018      	movs	r0, r3
 80005e8:	2310      	movs	r3, #16
 80005ea:	001a      	movs	r2, r3
 80005ec:	2100      	movs	r1, #0
 80005ee:	f003 f955 	bl	800389c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f2:	2380      	movs	r3, #128	; 0x80
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	0018      	movs	r0, r3
 80005f8:	f001 fd86 	bl	8002108 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fc:	193b      	adds	r3, r7, r4
 80005fe:	2202      	movs	r2, #2
 8000600:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000602:	193b      	adds	r3, r7, r4
 8000604:	2280      	movs	r2, #128	; 0x80
 8000606:	0052      	lsls	r2, r2, #1
 8000608:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800060a:	0021      	movs	r1, r4
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2240      	movs	r2, #64	; 0x40
 8000616:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2202      	movs	r2, #2
 800061c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2202      	movs	r2, #2
 8000622:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2200      	movs	r2, #0
 8000628:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2208      	movs	r2, #8
 800062e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	0292      	lsls	r2, r2, #10
 8000636:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2280      	movs	r2, #128	; 0x80
 800063c:	0592      	lsls	r2, r2, #22
 800063e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	187b      	adds	r3, r7, r1
 8000642:	0018      	movs	r0, r3
 8000644:	f001 fda0 	bl	8002188 <HAL_RCC_OscConfig>
 8000648:	1e03      	subs	r3, r0, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800064c:	f000 f819 	bl	8000682 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2207      	movs	r2, #7
 8000654:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2202      	movs	r2, #2
 800065a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2102      	movs	r1, #2
 800066c:	0018      	movs	r0, r3
 800066e:	f002 f89b 	bl	80027a8 <HAL_RCC_ClockConfig>
 8000672:	1e03      	subs	r3, r0, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000676:	f000 f804 	bl	8000682 <Error_Handler>
  }
}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b013      	add	sp, #76	; 0x4c
 8000680:	bd90      	pop	{r4, r7, pc}

08000682 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000686:	b672      	cpsid	i
}
 8000688:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068a:	e7fe      	b.n	800068a <Error_Handler+0x8>

0800068c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <HAL_MspInit+0x4c>)
 8000694:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <HAL_MspInit+0x4c>)
 8000698:	2101      	movs	r1, #1
 800069a:	430a      	orrs	r2, r1
 800069c:	641a      	str	r2, [r3, #64]	; 0x40
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <HAL_MspInit+0x4c>)
 80006a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a2:	2201      	movs	r2, #1
 80006a4:	4013      	ands	r3, r2
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <HAL_MspInit+0x4c>)
 80006ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <HAL_MspInit+0x4c>)
 80006b0:	2180      	movs	r1, #128	; 0x80
 80006b2:	0549      	lsls	r1, r1, #21
 80006b4:	430a      	orrs	r2, r1
 80006b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <HAL_MspInit+0x4c>)
 80006ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	055b      	lsls	r3, r3, #21
 80006c0:	4013      	ands	r3, r2
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80006c6:	23c0      	movs	r3, #192	; 0xc0
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 faf0 	bl	8000cb0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b002      	add	sp, #8
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000

080006dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <NMI_Handler+0x4>

080006e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <HardFault_Handler+0x4>

080006e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000700:	f000 faba 	bl	8000c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Color_Sel_Pin);
 800070e:	2002      	movs	r0, #2
 8000710:	f001 fcbc 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Mode_Sel_Pin);
 800071e:	2004      	movs	r0, #4
 8000720:	f001 fcb4 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8000730:	4b03      	ldr	r3, [pc, #12]	; (8000740 <DMA1_Channel1_IRQHandler+0x14>)
 8000732:	0018      	movs	r0, r3
 8000734:	f001 fa26 	bl	8001b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	200000d8 	.word	0x200000d8

08000744 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800074a:	0018      	movs	r0, r3
 800074c:	f001 fa1a 	bl	8001b84 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000752:	0018      	movs	r0, r3
 8000754:	f001 fa16 	bl	8001b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	20000134 	.word	0x20000134
 8000764:	20000190 	.word	0x20000190

08000768 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4);
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 800076e:	0018      	movs	r0, r3
 8000770:	f001 fa08 	bl	8001b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	200001ec 	.word	0x200001ec

08000780 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000784:	4b03      	ldr	r3, [pc, #12]	; (8000794 <ADC1_IRQHandler+0x14>)
 8000786:	0018      	movs	r0, r3
 8000788:	f000 fd6c 	bl	8001264 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	20000028 	.word	0x20000028

08000798 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch3;
DMA_HandleTypeDef hdma_tim3_ch4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08e      	sub	sp, #56	; 0x38
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007aa:	2328      	movs	r3, #40	; 0x28
 80007ac:	18fb      	adds	r3, r7, r3
 80007ae:	0018      	movs	r0, r3
 80007b0:	2310      	movs	r3, #16
 80007b2:	001a      	movs	r2, r3
 80007b4:	2100      	movs	r1, #0
 80007b6:	f003 f871 	bl	800389c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ba:	231c      	movs	r3, #28
 80007bc:	18fb      	adds	r3, r7, r3
 80007be:	0018      	movs	r0, r3
 80007c0:	230c      	movs	r3, #12
 80007c2:	001a      	movs	r2, r3
 80007c4:	2100      	movs	r1, #0
 80007c6:	f003 f869 	bl	800389c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ca:	003b      	movs	r3, r7
 80007cc:	0018      	movs	r0, r3
 80007ce:	231c      	movs	r3, #28
 80007d0:	001a      	movs	r2, r3
 80007d2:	2100      	movs	r1, #0
 80007d4:	f003 f862 	bl	800389c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007d8:	4b3e      	ldr	r3, [pc, #248]	; (80008d4 <MX_TIM3_Init+0x130>)
 80007da:	4a3f      	ldr	r2, [pc, #252]	; (80008d8 <MX_TIM3_Init+0x134>)
 80007dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80007de:	4b3d      	ldr	r3, [pc, #244]	; (80008d4 <MX_TIM3_Init+0x130>)
 80007e0:	223f      	movs	r2, #63	; 0x3f
 80007e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e4:	4b3b      	ldr	r3, [pc, #236]	; (80008d4 <MX_TIM3_Init+0x130>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80007ea:	4b3a      	ldr	r3, [pc, #232]	; (80008d4 <MX_TIM3_Init+0x130>)
 80007ec:	2263      	movs	r2, #99	; 0x63
 80007ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f0:	4b38      	ldr	r3, [pc, #224]	; (80008d4 <MX_TIM3_Init+0x130>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f6:	4b37      	ldr	r3, [pc, #220]	; (80008d4 <MX_TIM3_Init+0x130>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007fc:	4b35      	ldr	r3, [pc, #212]	; (80008d4 <MX_TIM3_Init+0x130>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f002 f95c 	bl	8002abc <HAL_TIM_Base_Init>
 8000804:	1e03      	subs	r3, r0, #0
 8000806:	d001      	beq.n	800080c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000808:	f7ff ff3b 	bl	8000682 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800080c:	2128      	movs	r1, #40	; 0x28
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2280      	movs	r2, #128	; 0x80
 8000812:	0152      	lsls	r2, r2, #5
 8000814:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000816:	187a      	adds	r2, r7, r1
 8000818:	4b2e      	ldr	r3, [pc, #184]	; (80008d4 <MX_TIM3_Init+0x130>)
 800081a:	0011      	movs	r1, r2
 800081c:	0018      	movs	r0, r3
 800081e:	f002 fb05 	bl	8002e2c <HAL_TIM_ConfigClockSource>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d001      	beq.n	800082a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000826:	f7ff ff2c 	bl	8000682 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800082a:	4b2a      	ldr	r3, [pc, #168]	; (80008d4 <MX_TIM3_Init+0x130>)
 800082c:	0018      	movs	r0, r3
 800082e:	f002 f99d 	bl	8002b6c <HAL_TIM_PWM_Init>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000836:	f7ff ff24 	bl	8000682 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083a:	211c      	movs	r1, #28
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000848:	187a      	adds	r2, r7, r1
 800084a:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <MX_TIM3_Init+0x130>)
 800084c:	0011      	movs	r1, r2
 800084e:	0018      	movs	r0, r3
 8000850:	f002 ff98 	bl	8003784 <HAL_TIMEx_MasterConfigSynchronization>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000858:	f7ff ff13 	bl	8000682 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800085c:	003b      	movs	r3, r7
 800085e:	2260      	movs	r2, #96	; 0x60
 8000860:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000862:	003b      	movs	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000868:	003b      	movs	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800086e:	003b      	movs	r3, r7
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000874:	0039      	movs	r1, r7
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_TIM3_Init+0x130>)
 8000878:	2200      	movs	r2, #0
 800087a:	0018      	movs	r0, r3
 800087c:	f002 f9d6 	bl	8002c2c <HAL_TIM_PWM_ConfigChannel>
 8000880:	1e03      	subs	r3, r0, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000884:	f7ff fefd 	bl	8000682 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000888:	0039      	movs	r1, r7
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_TIM3_Init+0x130>)
 800088c:	2204      	movs	r2, #4
 800088e:	0018      	movs	r0, r3
 8000890:	f002 f9cc 	bl	8002c2c <HAL_TIM_PWM_ConfigChannel>
 8000894:	1e03      	subs	r3, r0, #0
 8000896:	d001      	beq.n	800089c <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8000898:	f7ff fef3 	bl	8000682 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800089c:	0039      	movs	r1, r7
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <MX_TIM3_Init+0x130>)
 80008a0:	2208      	movs	r2, #8
 80008a2:	0018      	movs	r0, r3
 80008a4:	f002 f9c2 	bl	8002c2c <HAL_TIM_PWM_ConfigChannel>
 80008a8:	1e03      	subs	r3, r0, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 80008ac:	f7ff fee9 	bl	8000682 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008b0:	0039      	movs	r1, r7
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_TIM3_Init+0x130>)
 80008b4:	220c      	movs	r2, #12
 80008b6:	0018      	movs	r0, r3
 80008b8:	f002 f9b8 	bl	8002c2c <HAL_TIM_PWM_ConfigChannel>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 80008c0:	f7ff fedf 	bl	8000682 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008c4:	4b03      	ldr	r3, [pc, #12]	; (80008d4 <MX_TIM3_Init+0x130>)
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 f8e2 	bl	8000a90 <HAL_TIM_MspPostInit>

}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b00e      	add	sp, #56	; 0x38
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2000008c 	.word	0x2000008c
 80008d8:	40000400 	.word	0x40000400

080008dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a5f      	ldr	r2, [pc, #380]	; (8000a68 <HAL_TIM_Base_MspInit+0x18c>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d000      	beq.n	80008f0 <HAL_TIM_Base_MspInit+0x14>
 80008ee:	e0b7      	b.n	8000a60 <HAL_TIM_Base_MspInit+0x184>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008f0:	4b5e      	ldr	r3, [pc, #376]	; (8000a6c <HAL_TIM_Base_MspInit+0x190>)
 80008f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008f4:	4b5d      	ldr	r3, [pc, #372]	; (8000a6c <HAL_TIM_Base_MspInit+0x190>)
 80008f6:	2102      	movs	r1, #2
 80008f8:	430a      	orrs	r2, r1
 80008fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80008fc:	4b5b      	ldr	r3, [pc, #364]	; (8000a6c <HAL_TIM_Base_MspInit+0x190>)
 80008fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000900:	2202      	movs	r2, #2
 8000902:	4013      	ands	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1 Init */
    hdma_tim3_ch1.Instance = DMA1_Channel1;
 8000908:	4b59      	ldr	r3, [pc, #356]	; (8000a70 <HAL_TIM_Base_MspInit+0x194>)
 800090a:	4a5a      	ldr	r2, [pc, #360]	; (8000a74 <HAL_TIM_Base_MspInit+0x198>)
 800090c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 800090e:	4b58      	ldr	r3, [pc, #352]	; (8000a70 <HAL_TIM_Base_MspInit+0x194>)
 8000910:	2220      	movs	r2, #32
 8000912:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000914:	4b56      	ldr	r3, [pc, #344]	; (8000a70 <HAL_TIM_Base_MspInit+0x194>)
 8000916:	2210      	movs	r2, #16
 8000918:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800091a:	4b55      	ldr	r3, [pc, #340]	; (8000a70 <HAL_TIM_Base_MspInit+0x194>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000920:	4b53      	ldr	r3, [pc, #332]	; (8000a70 <HAL_TIM_Base_MspInit+0x194>)
 8000922:	2280      	movs	r2, #128	; 0x80
 8000924:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000926:	4b52      	ldr	r3, [pc, #328]	; (8000a70 <HAL_TIM_Base_MspInit+0x194>)
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	0052      	lsls	r2, r2, #1
 800092c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800092e:	4b50      	ldr	r3, [pc, #320]	; (8000a70 <HAL_TIM_Base_MspInit+0x194>)
 8000930:	2280      	movs	r2, #128	; 0x80
 8000932:	00d2      	lsls	r2, r2, #3
 8000934:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8000936:	4b4e      	ldr	r3, [pc, #312]	; (8000a70 <HAL_TIM_Base_MspInit+0x194>)
 8000938:	2200      	movs	r2, #0
 800093a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800093c:	4b4c      	ldr	r3, [pc, #304]	; (8000a70 <HAL_TIM_Base_MspInit+0x194>)
 800093e:	2200      	movs	r2, #0
 8000940:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8000942:	4b4b      	ldr	r3, [pc, #300]	; (8000a70 <HAL_TIM_Base_MspInit+0x194>)
 8000944:	0018      	movs	r0, r3
 8000946:	f001 f893 	bl	8001a70 <HAL_DMA_Init>
 800094a:	1e03      	subs	r3, r0, #0
 800094c:	d001      	beq.n	8000952 <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 800094e:	f7ff fe98 	bl	8000682 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a46      	ldr	r2, [pc, #280]	; (8000a70 <HAL_TIM_Base_MspInit+0x194>)
 8000956:	625a      	str	r2, [r3, #36]	; 0x24
 8000958:	4b45      	ldr	r3, [pc, #276]	; (8000a70 <HAL_TIM_Base_MspInit+0x194>)
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Channel2;
 800095e:	4b46      	ldr	r3, [pc, #280]	; (8000a78 <HAL_TIM_Base_MspInit+0x19c>)
 8000960:	4a46      	ldr	r2, [pc, #280]	; (8000a7c <HAL_TIM_Base_MspInit+0x1a0>)
 8000962:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8000964:	4b44      	ldr	r3, [pc, #272]	; (8000a78 <HAL_TIM_Base_MspInit+0x19c>)
 8000966:	2221      	movs	r2, #33	; 0x21
 8000968:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800096a:	4b43      	ldr	r3, [pc, #268]	; (8000a78 <HAL_TIM_Base_MspInit+0x19c>)
 800096c:	2210      	movs	r2, #16
 800096e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000970:	4b41      	ldr	r3, [pc, #260]	; (8000a78 <HAL_TIM_Base_MspInit+0x19c>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000976:	4b40      	ldr	r3, [pc, #256]	; (8000a78 <HAL_TIM_Base_MspInit+0x19c>)
 8000978:	2280      	movs	r2, #128	; 0x80
 800097a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800097c:	4b3e      	ldr	r3, [pc, #248]	; (8000a78 <HAL_TIM_Base_MspInit+0x19c>)
 800097e:	2280      	movs	r2, #128	; 0x80
 8000980:	0052      	lsls	r2, r2, #1
 8000982:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000984:	4b3c      	ldr	r3, [pc, #240]	; (8000a78 <HAL_TIM_Base_MspInit+0x19c>)
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	00d2      	lsls	r2, r2, #3
 800098a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800098c:	4b3a      	ldr	r3, [pc, #232]	; (8000a78 <HAL_TIM_Base_MspInit+0x19c>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000992:	4b39      	ldr	r3, [pc, #228]	; (8000a78 <HAL_TIM_Base_MspInit+0x19c>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8000998:	4b37      	ldr	r3, [pc, #220]	; (8000a78 <HAL_TIM_Base_MspInit+0x19c>)
 800099a:	0018      	movs	r0, r3
 800099c:	f001 f868 	bl	8001a70 <HAL_DMA_Init>
 80009a0:	1e03      	subs	r3, r0, #0
 80009a2:	d001      	beq.n	80009a8 <HAL_TIM_Base_MspInit+0xcc>
    {
      Error_Handler();
 80009a4:	f7ff fe6d 	bl	8000682 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a33      	ldr	r2, [pc, #204]	; (8000a78 <HAL_TIM_Base_MspInit+0x19c>)
 80009ac:	629a      	str	r2, [r3, #40]	; 0x28
 80009ae:	4b32      	ldr	r3, [pc, #200]	; (8000a78 <HAL_TIM_Base_MspInit+0x19c>)
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Channel3;
 80009b4:	4b32      	ldr	r3, [pc, #200]	; (8000a80 <HAL_TIM_Base_MspInit+0x1a4>)
 80009b6:	4a33      	ldr	r2, [pc, #204]	; (8000a84 <HAL_TIM_Base_MspInit+0x1a8>)
 80009b8:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_TIM3_CH3;
 80009ba:	4b31      	ldr	r3, [pc, #196]	; (8000a80 <HAL_TIM_Base_MspInit+0x1a4>)
 80009bc:	2222      	movs	r2, #34	; 0x22
 80009be:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009c0:	4b2f      	ldr	r3, [pc, #188]	; (8000a80 <HAL_TIM_Base_MspInit+0x1a4>)
 80009c2:	2210      	movs	r2, #16
 80009c4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80009c6:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <HAL_TIM_Base_MspInit+0x1a4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80009cc:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <HAL_TIM_Base_MspInit+0x1a4>)
 80009ce:	2280      	movs	r2, #128	; 0x80
 80009d0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009d2:	4b2b      	ldr	r3, [pc, #172]	; (8000a80 <HAL_TIM_Base_MspInit+0x1a4>)
 80009d4:	2280      	movs	r2, #128	; 0x80
 80009d6:	0052      	lsls	r2, r2, #1
 80009d8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009da:	4b29      	ldr	r3, [pc, #164]	; (8000a80 <HAL_TIM_Base_MspInit+0x1a4>)
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	00d2      	lsls	r2, r2, #3
 80009e0:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 80009e2:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <HAL_TIM_Base_MspInit+0x1a4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80009e8:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <HAL_TIM_Base_MspInit+0x1a4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 80009ee:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <HAL_TIM_Base_MspInit+0x1a4>)
 80009f0:	0018      	movs	r0, r3
 80009f2:	f001 f83d 	bl	8001a70 <HAL_DMA_Init>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d001      	beq.n	80009fe <HAL_TIM_Base_MspInit+0x122>
    {
      Error_Handler();
 80009fa:	f7ff fe42 	bl	8000682 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a1f      	ldr	r2, [pc, #124]	; (8000a80 <HAL_TIM_Base_MspInit+0x1a4>)
 8000a02:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a04:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <HAL_TIM_Base_MspInit+0x1a4>)
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM3_CH4 Init */
    hdma_tim3_ch4.Instance = DMA1_Channel4;
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <HAL_TIM_Base_MspInit+0x1ac>)
 8000a0c:	4a1f      	ldr	r2, [pc, #124]	; (8000a8c <HAL_TIM_Base_MspInit+0x1b0>)
 8000a0e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <HAL_TIM_Base_MspInit+0x1ac>)
 8000a12:	2223      	movs	r2, #35	; 0x23
 8000a14:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <HAL_TIM_Base_MspInit+0x1ac>)
 8000a18:	2210      	movs	r2, #16
 8000a1a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <HAL_TIM_Base_MspInit+0x1ac>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <HAL_TIM_Base_MspInit+0x1ac>)
 8000a24:	2280      	movs	r2, #128	; 0x80
 8000a26:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <HAL_TIM_Base_MspInit+0x1ac>)
 8000a2a:	2280      	movs	r2, #128	; 0x80
 8000a2c:	0052      	lsls	r2, r2, #1
 8000a2e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <HAL_TIM_Base_MspInit+0x1ac>)
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	00d2      	lsls	r2, r2, #3
 8000a36:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_NORMAL;
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <HAL_TIM_Base_MspInit+0x1ac>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_TIM_Base_MspInit+0x1ac>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 8000a44:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <HAL_TIM_Base_MspInit+0x1ac>)
 8000a46:	0018      	movs	r0, r3
 8000a48:	f001 f812 	bl	8001a70 <HAL_DMA_Init>
 8000a4c:	1e03      	subs	r3, r0, #0
 8000a4e:	d001      	beq.n	8000a54 <HAL_TIM_Base_MspInit+0x178>
    {
      Error_Handler();
 8000a50:	f7ff fe17 	bl	8000682 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a0c      	ldr	r2, [pc, #48]	; (8000a88 <HAL_TIM_Base_MspInit+0x1ac>)
 8000a58:	631a      	str	r2, [r3, #48]	; 0x30
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <HAL_TIM_Base_MspInit+0x1ac>)
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b004      	add	sp, #16
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40000400 	.word	0x40000400
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	200000d8 	.word	0x200000d8
 8000a74:	40020008 	.word	0x40020008
 8000a78:	20000134 	.word	0x20000134
 8000a7c:	4002001c 	.word	0x4002001c
 8000a80:	20000190 	.word	0x20000190
 8000a84:	40020030 	.word	0x40020030
 8000a88:	200001ec 	.word	0x200001ec
 8000a8c:	40020044 	.word	0x40020044

08000a90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b08b      	sub	sp, #44	; 0x2c
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	2414      	movs	r4, #20
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	2314      	movs	r3, #20
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	f002 fefa 	bl	800389c <memset>
  if(timHandle->Instance==TIM3)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a25      	ldr	r2, [pc, #148]	; (8000b44 <HAL_TIM_MspPostInit+0xb4>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d143      	bne.n	8000b3a <HAL_TIM_MspPostInit+0xaa>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <HAL_TIM_MspPostInit+0xb8>)
 8000ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ab6:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <HAL_TIM_MspPostInit+0xb8>)
 8000ab8:	2101      	movs	r1, #1
 8000aba:	430a      	orrs	r2, r1
 8000abc:	635a      	str	r2, [r3, #52]	; 0x34
 8000abe:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <HAL_TIM_MspPostInit+0xb8>)
 8000ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <HAL_TIM_MspPostInit+0xb8>)
 8000acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ace:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <HAL_TIM_MspPostInit+0xb8>)
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <HAL_TIM_MspPostInit+0xb8>)
 8000ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ada:	2202      	movs	r2, #2
 8000adc:	4013      	ands	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin;
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	22c0      	movs	r2, #192	; 0xc0
 8000ae6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	2202      	movs	r2, #2
 8000aec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	2201      	movs	r2, #1
 8000afe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	193a      	adds	r2, r7, r4
 8000b02:	23a0      	movs	r3, #160	; 0xa0
 8000b04:	05db      	lsls	r3, r3, #23
 8000b06:	0011      	movs	r1, r2
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f001 f93d 	bl	8001d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BLUE_Pin|WHITE_Pin;
 8000b0e:	0021      	movs	r1, r4
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	2203      	movs	r2, #3
 8000b14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	2202      	movs	r2, #2
 8000b1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	2200      	movs	r2, #0
 8000b26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <HAL_TIM_MspPostInit+0xbc>)
 8000b32:	0019      	movs	r1, r3
 8000b34:	0010      	movs	r0, r2
 8000b36:	f001 f927 	bl	8001d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b00b      	add	sp, #44	; 0x2c
 8000b40:	bd90      	pop	{r4, r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	40000400 	.word	0x40000400
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	50000400 	.word	0x50000400

08000b50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b50:	480d      	ldr	r0, [pc, #52]	; (8000b88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b52:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b54:	f7ff fe20 	bl	8000798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b58:	480c      	ldr	r0, [pc, #48]	; (8000b8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5a:	490d      	ldr	r1, [pc, #52]	; (8000b90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <LoopForever+0xe>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b70:	4c0a      	ldr	r4, [pc, #40]	; (8000b9c <LoopForever+0x16>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b7e:	f002 fe69 	bl	8003854 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b82:	f7ff fd15 	bl	80005b0 <main>

08000b86 <LoopForever>:

LoopForever:
  b LoopForever
 8000b86:	e7fe      	b.n	8000b86 <LoopForever>
  ldr   r0, =_estack
 8000b88:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b94:	08003960 	.word	0x08003960
  ldr r2, =_sbss
 8000b98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b9c:	2000024c 	.word	0x2000024c

08000ba0 <EXTI4_15_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <EXTI4_15_IRQHandler>
	...

08000ba4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <HAL_Init+0x3c>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <HAL_Init+0x3c>)
 8000bb6:	2180      	movs	r1, #128	; 0x80
 8000bb8:	0049      	lsls	r1, r1, #1
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bbe:	2003      	movs	r0, #3
 8000bc0:	f000 f810 	bl	8000be4 <HAL_InitTick>
 8000bc4:	1e03      	subs	r3, r0, #0
 8000bc6:	d003      	beq.n	8000bd0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	2201      	movs	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]
 8000bce:	e001      	b.n	8000bd4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000bd0:	f7ff fd5c 	bl	800068c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	781b      	ldrb	r3, [r3, #0]
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b002      	add	sp, #8
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40022000 	.word	0x40022000

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bec:	230f      	movs	r3, #15
 8000bee:	18fb      	adds	r3, r7, r3
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000bf4:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <HAL_InitTick+0x88>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d02b      	beq.n	8000c54 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000bfc:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <HAL_InitTick+0x8c>)
 8000bfe:	681c      	ldr	r4, [r3, #0]
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <HAL_InitTick+0x88>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	0019      	movs	r1, r3
 8000c06:	23fa      	movs	r3, #250	; 0xfa
 8000c08:	0098      	lsls	r0, r3, #2
 8000c0a:	f7ff fa79 	bl	8000100 <__udivsi3>
 8000c0e:	0003      	movs	r3, r0
 8000c10:	0019      	movs	r1, r3
 8000c12:	0020      	movs	r0, r4
 8000c14:	f7ff fa74 	bl	8000100 <__udivsi3>
 8000c18:	0003      	movs	r3, r0
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f000 ff1b 	bl	8001a56 <HAL_SYSTICK_Config>
 8000c20:	1e03      	subs	r3, r0, #0
 8000c22:	d112      	bne.n	8000c4a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b03      	cmp	r3, #3
 8000c28:	d80a      	bhi.n	8000c40 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	425b      	negs	r3, r3
 8000c30:	2200      	movs	r2, #0
 8000c32:	0018      	movs	r0, r3
 8000c34:	f000 feea 	bl	8001a0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_InitTick+0x90>)
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	e00d      	b.n	8000c5c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c40:	230f      	movs	r3, #15
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]
 8000c48:	e008      	b.n	8000c5c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	2201      	movs	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]
 8000c52:	e003      	b.n	8000c5c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c54:	230f      	movs	r3, #15
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	18fb      	adds	r3, r7, r3
 8000c60:	781b      	ldrb	r3, [r3, #0]
}
 8000c62:	0018      	movs	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b005      	add	sp, #20
 8000c68:	bd90      	pop	{r4, r7, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000000 	.word	0x20000000
 8000c74:	20000004 	.word	0x20000004

08000c78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_IncTick+0x1c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	001a      	movs	r2, r3
 8000c82:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <HAL_IncTick+0x20>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	18d2      	adds	r2, r2, r3
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <HAL_IncTick+0x20>)
 8000c8a:	601a      	str	r2, [r3, #0]
}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000248 	.word	0x20000248

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b02      	ldr	r3, [pc, #8]	; (8000cac <HAL_GetTick+0x10>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	20000248 	.word	0x20000248

08000cb0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	601a      	str	r2, [r3, #0]
}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b002      	add	sp, #8
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	40010000 	.word	0x40010000
 8000cd8:	fffff9ff 	.word	0xfffff9ff

08000cdc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000cec:	401a      	ands	r2, r3
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	601a      	str	r2, [r3, #0]
}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b002      	add	sp, #8
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	fe3fffff 	.word	0xfe3fffff

08000d04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	23e0      	movs	r3, #224	; 0xe0
 8000d12:	045b      	lsls	r3, r3, #17
 8000d14:	4013      	ands	r3, r2
}
 8000d16:	0018      	movs	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b002      	add	sp, #8
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b084      	sub	sp, #16
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	60f8      	str	r0, [r7, #12]
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	2104      	movs	r1, #4
 8000d32:	400a      	ands	r2, r1
 8000d34:	2107      	movs	r1, #7
 8000d36:	4091      	lsls	r1, r2
 8000d38:	000a      	movs	r2, r1
 8000d3a:	43d2      	mvns	r2, r2
 8000d3c:	401a      	ands	r2, r3
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	2104      	movs	r1, #4
 8000d42:	400b      	ands	r3, r1
 8000d44:	6879      	ldr	r1, [r7, #4]
 8000d46:	4099      	lsls	r1, r3
 8000d48:	000b      	movs	r3, r1
 8000d4a:	431a      	orrs	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b004      	add	sp, #16
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	683a      	ldr	r2, [r7, #0]
 8000d68:	2104      	movs	r1, #4
 8000d6a:	400a      	ands	r2, r1
 8000d6c:	2107      	movs	r1, #7
 8000d6e:	4091      	lsls	r1, r2
 8000d70:	000a      	movs	r2, r1
 8000d72:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	2104      	movs	r1, #4
 8000d78:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d7a:	40da      	lsrs	r2, r3
 8000d7c:	0013      	movs	r3, r2
}
 8000d7e:	0018      	movs	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b002      	add	sp, #8
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	23c0      	movs	r3, #192	; 0xc0
 8000d94:	011b      	lsls	r3, r3, #4
 8000d96:	4013      	ands	r3, r2
 8000d98:	d101      	bne.n	8000d9e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e000      	b.n	8000da0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b002      	add	sp, #8
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db8:	68ba      	ldr	r2, [r7, #8]
 8000dba:	211f      	movs	r1, #31
 8000dbc:	400a      	ands	r2, r1
 8000dbe:	210f      	movs	r1, #15
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	000a      	movs	r2, r1
 8000dc4:	43d2      	mvns	r2, r2
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	0e9b      	lsrs	r3, r3, #26
 8000dcc:	210f      	movs	r1, #15
 8000dce:	4019      	ands	r1, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	201f      	movs	r0, #31
 8000dd4:	4003      	ands	r3, r0
 8000dd6:	4099      	lsls	r1, r3
 8000dd8:	000b      	movs	r3, r1
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b004      	add	sp, #16
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	035b      	lsls	r3, r3, #13
 8000dfa:	0b5b      	lsrs	r3, r3, #13
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b002      	add	sp, #8
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	0352      	lsls	r2, r2, #13
 8000e1c:	0b52      	lsrs	r2, r2, #13
 8000e1e:	43d2      	mvns	r2, r2
 8000e20:	401a      	ands	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b002      	add	sp, #8
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	4013      	ands	r3, r2
}
 8000e3e:	0018      	movs	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b002      	add	sp, #8
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	68ba      	ldr	r2, [r7, #8]
 8000e5a:	0212      	lsls	r2, r2, #8
 8000e5c:	43d2      	mvns	r2, r2
 8000e5e:	401a      	ands	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	021b      	lsls	r3, r3, #8
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	400b      	ands	r3, r1
 8000e68:	4904      	ldr	r1, [pc, #16]	; (8000e7c <LL_ADC_SetChannelSamplingTime+0x34>)
 8000e6a:	400b      	ands	r3, r1
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b004      	add	sp, #16
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	07ffff00 	.word	0x07ffff00

08000e80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <LL_ADC_EnableInternalRegulator+0x24>)
 8000e8e:	4013      	ands	r3, r2
 8000e90:	2280      	movs	r2, #128	; 0x80
 8000e92:	0552      	lsls	r2, r2, #21
 8000e94:	431a      	orrs	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b002      	add	sp, #8
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	6fffffe8 	.word	0x6fffffe8

08000ea8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	055b      	lsls	r3, r3, #21
 8000eb8:	401a      	ands	r2, r3
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	055b      	lsls	r3, r3, #21
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d101      	bne.n	8000ec6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e000      	b.n	8000ec8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	0018      	movs	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b002      	add	sp, #8
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	2201      	movs	r2, #1
 8000ede:	4013      	ands	r3, r2
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d101      	bne.n	8000ee8 <LL_ADC_IsEnabled+0x18>
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e000      	b.n	8000eea <LL_ADC_IsEnabled+0x1a>
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	0018      	movs	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	2204      	movs	r2, #4
 8000f00:	4013      	ands	r3, r2
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	d101      	bne.n	8000f0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b002      	add	sp, #8
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f1c:	231f      	movs	r3, #31
 8000f1e:	18fb      	adds	r3, r7, r3
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d101      	bne.n	8000f3a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e17f      	b.n	800123a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d10a      	bne.n	8000f58 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	0018      	movs	r0, r3
 8000f46:	f7ff f9d3 	bl	80002f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2254      	movs	r2, #84	; 0x54
 8000f54:	2100      	movs	r1, #0
 8000f56:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f7ff ffa3 	bl	8000ea8 <LL_ADC_IsInternalRegulatorEnabled>
 8000f62:	1e03      	subs	r3, r0, #0
 8000f64:	d115      	bne.n	8000f92 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f7ff ff88 	bl	8000e80 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000f70:	4bb4      	ldr	r3, [pc, #720]	; (8001244 <HAL_ADC_Init+0x330>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	49b4      	ldr	r1, [pc, #720]	; (8001248 <HAL_ADC_Init+0x334>)
 8000f76:	0018      	movs	r0, r3
 8000f78:	f7ff f8c2 	bl	8000100 <__udivsi3>
 8000f7c:	0003      	movs	r3, r0
 8000f7e:	3301      	adds	r3, #1
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f84:	e002      	b.n	8000f8c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1f9      	bne.n	8000f86 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	0018      	movs	r0, r3
 8000f98:	f7ff ff86 	bl	8000ea8 <LL_ADC_IsInternalRegulatorEnabled>
 8000f9c:	1e03      	subs	r3, r0, #0
 8000f9e:	d10f      	bne.n	8000fc0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa4:	2210      	movs	r2, #16
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000fb8:	231f      	movs	r3, #31
 8000fba:	18fb      	adds	r3, r7, r3
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f7ff ff94 	bl	8000ef2 <LL_ADC_REG_IsConversionOngoing>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd2:	2210      	movs	r2, #16
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	d000      	beq.n	8000fda <HAL_ADC_Init+0xc6>
 8000fd8:	e122      	b.n	8001220 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d000      	beq.n	8000fe2 <HAL_ADC_Init+0xce>
 8000fe0:	e11e      	b.n	8001220 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe6:	4a99      	ldr	r2, [pc, #612]	; (800124c <HAL_ADC_Init+0x338>)
 8000fe8:	4013      	ands	r3, r2
 8000fea:	2202      	movs	r2, #2
 8000fec:	431a      	orrs	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f7ff ff6a 	bl	8000ed0 <LL_ADC_IsEnabled>
 8000ffc:	1e03      	subs	r3, r0, #0
 8000ffe:	d000      	beq.n	8001002 <HAL_ADC_Init+0xee>
 8001000:	e0ad      	b.n	800115e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7e1b      	ldrb	r3, [r3, #24]
 800100a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800100c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	7e5b      	ldrb	r3, [r3, #25]
 8001012:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001014:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	7e9b      	ldrb	r3, [r3, #26]
 800101a:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800101c:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	2b00      	cmp	r3, #0
 8001024:	d002      	beq.n	800102c <HAL_ADC_Init+0x118>
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	015b      	lsls	r3, r3, #5
 800102a:	e000      	b.n	800102e <HAL_ADC_Init+0x11a>
 800102c:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800102e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001034:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	2b00      	cmp	r3, #0
 800103c:	da04      	bge.n	8001048 <HAL_ADC_Init+0x134>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	085b      	lsrs	r3, r3, #1
 8001046:	e001      	b.n	800104c <HAL_ADC_Init+0x138>
 8001048:	2380      	movs	r3, #128	; 0x80
 800104a:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800104c:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	212c      	movs	r1, #44	; 0x2c
 8001052:	5c5b      	ldrb	r3, [r3, r1]
 8001054:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001056:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2220      	movs	r2, #32
 8001062:	5c9b      	ldrb	r3, [r3, r2]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d115      	bne.n	8001094 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7e9b      	ldrb	r3, [r3, #26]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d105      	bne.n	800107c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	2280      	movs	r2, #128	; 0x80
 8001074:	0252      	lsls	r2, r2, #9
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
 800107a:	e00b      	b.n	8001094 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001080:	2220      	movs	r2, #32
 8001082:	431a      	orrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800108c:	2201      	movs	r2, #1
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00a      	beq.n	80010b2 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010a0:	23e0      	movs	r3, #224	; 0xe0
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80010aa:	4313      	orrs	r3, r2
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	4a65      	ldr	r2, [pc, #404]	; (8001250 <HAL_ADC_Init+0x33c>)
 80010ba:	4013      	ands	r3, r2
 80010bc:	0019      	movs	r1, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	430a      	orrs	r2, r1
 80010c6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	0f9b      	lsrs	r3, r3, #30
 80010ce:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010d4:	4313      	orrs	r3, r2
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	4313      	orrs	r3, r2
 80010da:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	223c      	movs	r2, #60	; 0x3c
 80010e0:	5c9b      	ldrb	r3, [r3, r2]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d111      	bne.n	800110a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	0f9b      	lsrs	r3, r3, #30
 80010ec:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010f2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80010f8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80010fe:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	4313      	orrs	r3, r2
 8001104:	2201      	movs	r2, #1
 8001106:	4313      	orrs	r3, r2
 8001108:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	4a50      	ldr	r2, [pc, #320]	; (8001254 <HAL_ADC_Init+0x340>)
 8001112:	4013      	ands	r3, r2
 8001114:	0019      	movs	r1, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	430a      	orrs	r2, r1
 800111e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	23c0      	movs	r3, #192	; 0xc0
 8001126:	061b      	lsls	r3, r3, #24
 8001128:	429a      	cmp	r2, r3
 800112a:	d018      	beq.n	800115e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	05db      	lsls	r3, r3, #23
 8001134:	429a      	cmp	r2, r3
 8001136:	d012      	beq.n	800115e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	061b      	lsls	r3, r3, #24
 8001140:	429a      	cmp	r2, r3
 8001142:	d00c      	beq.n	800115e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001144:	4b44      	ldr	r3, [pc, #272]	; (8001258 <HAL_ADC_Init+0x344>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a44      	ldr	r2, [pc, #272]	; (800125c <HAL_ADC_Init+0x348>)
 800114a:	4013      	ands	r3, r2
 800114c:	0019      	movs	r1, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	23f0      	movs	r3, #240	; 0xf0
 8001154:	039b      	lsls	r3, r3, #14
 8001156:	401a      	ands	r2, r3
 8001158:	4b3f      	ldr	r3, [pc, #252]	; (8001258 <HAL_ADC_Init+0x344>)
 800115a:	430a      	orrs	r2, r1
 800115c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001166:	001a      	movs	r2, r3
 8001168:	2100      	movs	r1, #0
 800116a:	f7ff fdd8 	bl	8000d1e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6818      	ldr	r0, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001176:	493a      	ldr	r1, [pc, #232]	; (8001260 <HAL_ADC_Init+0x34c>)
 8001178:	001a      	movs	r2, r3
 800117a:	f7ff fdd0 	bl	8000d1e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d109      	bne.n	800119a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2110      	movs	r1, #16
 8001192:	4249      	negs	r1, r1
 8001194:	430a      	orrs	r2, r1
 8001196:	629a      	str	r2, [r3, #40]	; 0x28
 8001198:	e018      	b.n	80011cc <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	691a      	ldr	r2, [r3, #16]
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	039b      	lsls	r3, r3, #14
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d112      	bne.n	80011cc <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	221c      	movs	r2, #28
 80011b6:	4013      	ands	r3, r2
 80011b8:	2210      	movs	r2, #16
 80011ba:	4252      	negs	r2, r2
 80011bc:	409a      	lsls	r2, r3
 80011be:	0011      	movs	r1, r2
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2100      	movs	r1, #0
 80011d2:	0018      	movs	r0, r3
 80011d4:	f7ff fdc0 	bl	8000d58 <LL_ADC_GetSamplingTimeCommonChannels>
 80011d8:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80011de:	429a      	cmp	r2, r3
 80011e0:	d10b      	bne.n	80011fa <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ec:	2203      	movs	r2, #3
 80011ee:	4393      	bics	r3, r2
 80011f0:	2201      	movs	r2, #1
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80011f8:	e01c      	b.n	8001234 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fe:	2212      	movs	r2, #18
 8001200:	4393      	bics	r3, r2
 8001202:	2210      	movs	r2, #16
 8001204:	431a      	orrs	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800120e:	2201      	movs	r2, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001216:	231f      	movs	r3, #31
 8001218:	18fb      	adds	r3, r7, r3
 800121a:	2201      	movs	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800121e:	e009      	b.n	8001234 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001224:	2210      	movs	r2, #16
 8001226:	431a      	orrs	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800122c:	231f      	movs	r3, #31
 800122e:	18fb      	adds	r3, r7, r3
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001234:	231f      	movs	r3, #31
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	781b      	ldrb	r3, [r3, #0]
}
 800123a:	0018      	movs	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	b008      	add	sp, #32
 8001240:	bd80      	pop	{r7, pc}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	20000000 	.word	0x20000000
 8001248:	00030d40 	.word	0x00030d40
 800124c:	fffffefd 	.word	0xfffffefd
 8001250:	fffe0201 	.word	0xfffe0201
 8001254:	1ffffc02 	.word	0x1ffffc02
 8001258:	40012708 	.word	0x40012708
 800125c:	ffc3ffff 	.word	0xffc3ffff
 8001260:	07ffff04 	.word	0x07ffff04

08001264 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	2202      	movs	r2, #2
 8001284:	4013      	ands	r3, r2
 8001286:	d017      	beq.n	80012b8 <HAL_ADC_IRQHandler+0x54>
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2202      	movs	r2, #2
 800128c:	4013      	ands	r3, r2
 800128e:	d013      	beq.n	80012b8 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001294:	2210      	movs	r2, #16
 8001296:	4013      	ands	r3, r2
 8001298:	d106      	bne.n	80012a8 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129e:	2280      	movs	r2, #128	; 0x80
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	0018      	movs	r0, r3
 80012ac:	f000 faf2 	bl	8001894 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2202      	movs	r2, #2
 80012b6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	2204      	movs	r2, #4
 80012bc:	4013      	ands	r3, r2
 80012be:	d003      	beq.n	80012c8 <HAL_ADC_IRQHandler+0x64>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2204      	movs	r2, #4
 80012c4:	4013      	ands	r3, r2
 80012c6:	d107      	bne.n	80012d8 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	2208      	movs	r2, #8
 80012cc:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80012ce:	d04d      	beq.n	800136c <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2208      	movs	r2, #8
 80012d4:	4013      	ands	r3, r2
 80012d6:	d049      	beq.n	800136c <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012dc:	2210      	movs	r2, #16
 80012de:	4013      	ands	r3, r2
 80012e0:	d106      	bne.n	80012f0 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e6:	2280      	movs	r2, #128	; 0x80
 80012e8:	0092      	lsls	r2, r2, #2
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	0018      	movs	r0, r3
 80012f6:	f7ff fd46 	bl	8000d86 <LL_ADC_REG_IsTriggerSourceSWStart>
 80012fa:	1e03      	subs	r3, r0, #0
 80012fc:	d02e      	beq.n	800135c <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7e9b      	ldrb	r3, [r3, #26]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d12a      	bne.n	800135c <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2208      	movs	r2, #8
 800130e:	4013      	ands	r3, r2
 8001310:	2b08      	cmp	r3, #8
 8001312:	d123      	bne.n	800135c <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	0018      	movs	r0, r3
 800131a:	f7ff fdea 	bl	8000ef2 <LL_ADC_REG_IsConversionOngoing>
 800131e:	1e03      	subs	r3, r0, #0
 8001320:	d110      	bne.n	8001344 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	210c      	movs	r1, #12
 800132e:	438a      	bics	r2, r1
 8001330:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001336:	4a56      	ldr	r2, [pc, #344]	; (8001490 <HAL_ADC_IRQHandler+0x22c>)
 8001338:	4013      	ands	r3, r2
 800133a:	2201      	movs	r2, #1
 800133c:	431a      	orrs	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	659a      	str	r2, [r3, #88]	; 0x58
 8001342:	e00b      	b.n	800135c <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001348:	2220      	movs	r2, #32
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001354:	2201      	movs	r2, #1
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	0018      	movs	r0, r3
 8001360:	f000 f898 	bl	8001494 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	220c      	movs	r2, #12
 800136a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	2280      	movs	r2, #128	; 0x80
 8001370:	4013      	ands	r3, r2
 8001372:	d012      	beq.n	800139a <HAL_ADC_IRQHandler+0x136>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2280      	movs	r2, #128	; 0x80
 8001378:	4013      	ands	r3, r2
 800137a:	d00e      	beq.n	800139a <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001380:	2280      	movs	r2, #128	; 0x80
 8001382:	0252      	lsls	r2, r2, #9
 8001384:	431a      	orrs	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	0018      	movs	r0, r3
 800138e:	f000 f889 	bl	80014a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2280      	movs	r2, #128	; 0x80
 8001398:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	4013      	ands	r3, r2
 80013a2:	d014      	beq.n	80013ce <HAL_ADC_IRQHandler+0x16a>
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4013      	ands	r3, r2
 80013ac:	d00f      	beq.n	80013ce <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	2280      	movs	r2, #128	; 0x80
 80013b4:	0292      	lsls	r2, r2, #10
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	0018      	movs	r0, r3
 80013c0:	f000 fa58 	bl	8001874 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2280      	movs	r2, #128	; 0x80
 80013ca:	0052      	lsls	r2, r2, #1
 80013cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4013      	ands	r3, r2
 80013d6:	d014      	beq.n	8001402 <HAL_ADC_IRQHandler+0x19e>
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4013      	ands	r3, r2
 80013e0:	d00f      	beq.n	8001402 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e6:	2280      	movs	r2, #128	; 0x80
 80013e8:	02d2      	lsls	r2, r2, #11
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	0018      	movs	r0, r3
 80013f4:	f000 fa46 	bl	8001884 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2280      	movs	r2, #128	; 0x80
 80013fe:	0092      	lsls	r2, r2, #2
 8001400:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	2210      	movs	r2, #16
 8001406:	4013      	ands	r3, r2
 8001408:	d02b      	beq.n	8001462 <HAL_ADC_IRQHandler+0x1fe>
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2210      	movs	r2, #16
 800140e:	4013      	ands	r3, r2
 8001410:	d027      	beq.n	8001462 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	2b00      	cmp	r3, #0
 8001418:	d102      	bne.n	8001420 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 800141a:	2301      	movs	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	e008      	b.n	8001432 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	0018      	movs	r0, r3
 8001426:	f7ff fd02 	bl	8000e2e <LL_ADC_REG_GetDMATransfer>
 800142a:	1e03      	subs	r3, r0, #0
 800142c:	d001      	beq.n	8001432 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 800142e:	2301      	movs	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d110      	bne.n	800145a <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143c:	2280      	movs	r2, #128	; 0x80
 800143e:	00d2      	lsls	r2, r2, #3
 8001440:	431a      	orrs	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144a:	2202      	movs	r2, #2
 800144c:	431a      	orrs	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	0018      	movs	r0, r3
 8001456:	f000 f82d 	bl	80014b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2210      	movs	r2, #16
 8001460:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	019b      	lsls	r3, r3, #6
 8001468:	4013      	ands	r3, r2
 800146a:	d00d      	beq.n	8001488 <HAL_ADC_IRQHandler+0x224>
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	019b      	lsls	r3, r3, #6
 8001472:	4013      	ands	r3, r2
 8001474:	d008      	beq.n	8001488 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	0018      	movs	r0, r3
 800147a:	f000 fa13 	bl	80018a4 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2280      	movs	r2, #128	; 0x80
 8001484:	0192      	lsls	r2, r2, #6
 8001486:	601a      	str	r2, [r3, #0]
  }
}
 8001488:	46c0      	nop			; (mov r8, r8)
 800148a:	46bd      	mov	sp, r7
 800148c:	b006      	add	sp, #24
 800148e:	bd80      	pop	{r7, pc}
 8001490:	fffffefe 	.word	0xfffffefe

08001494 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800149c:	46c0      	nop			; (mov r8, r8)
 800149e:	46bd      	mov	sp, r7
 80014a0:	b002      	add	sp, #8
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80014ac:	46c0      	nop			; (mov r8, r8)
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b002      	add	sp, #8
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	b002      	add	sp, #8
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ce:	2317      	movs	r3, #23
 80014d0:	18fb      	adds	r3, r7, r3
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2254      	movs	r2, #84	; 0x54
 80014de:	5c9b      	ldrb	r3, [r3, r2]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d101      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x24>
 80014e4:	2302      	movs	r3, #2
 80014e6:	e1c0      	b.n	800186a <HAL_ADC_ConfigChannel+0x3a6>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2254      	movs	r2, #84	; 0x54
 80014ec:	2101      	movs	r1, #1
 80014ee:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	0018      	movs	r0, r3
 80014f6:	f7ff fcfc 	bl	8000ef2 <LL_ADC_REG_IsConversionOngoing>
 80014fa:	1e03      	subs	r3, r0, #0
 80014fc:	d000      	beq.n	8001500 <HAL_ADC_ConfigChannel+0x3c>
 80014fe:	e1a3      	b.n	8001848 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d100      	bne.n	800150a <HAL_ADC_ConfigChannel+0x46>
 8001508:	e143      	b.n	8001792 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691a      	ldr	r2, [r3, #16]
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	061b      	lsls	r3, r3, #24
 8001512:	429a      	cmp	r2, r3
 8001514:	d004      	beq.n	8001520 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800151a:	4ac1      	ldr	r2, [pc, #772]	; (8001820 <HAL_ADC_ConfigChannel+0x35c>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d108      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	0019      	movs	r1, r3
 800152a:	0010      	movs	r0, r2
 800152c:	f7ff fc5c 	bl	8000de8 <LL_ADC_REG_SetSequencerChAdd>
 8001530:	e0c9      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	211f      	movs	r1, #31
 800153c:	400b      	ands	r3, r1
 800153e:	210f      	movs	r1, #15
 8001540:	4099      	lsls	r1, r3
 8001542:	000b      	movs	r3, r1
 8001544:	43db      	mvns	r3, r3
 8001546:	4013      	ands	r3, r2
 8001548:	0019      	movs	r1, r3
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	035b      	lsls	r3, r3, #13
 8001550:	0b5b      	lsrs	r3, r3, #13
 8001552:	d105      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x9c>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	0e9b      	lsrs	r3, r3, #26
 800155a:	221f      	movs	r2, #31
 800155c:	4013      	ands	r3, r2
 800155e:	e098      	b.n	8001692 <HAL_ADC_ConfigChannel+0x1ce>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2201      	movs	r2, #1
 8001566:	4013      	ands	r3, r2
 8001568:	d000      	beq.n	800156c <HAL_ADC_ConfigChannel+0xa8>
 800156a:	e091      	b.n	8001690 <HAL_ADC_ConfigChannel+0x1cc>
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2202      	movs	r2, #2
 8001572:	4013      	ands	r3, r2
 8001574:	d000      	beq.n	8001578 <HAL_ADC_ConfigChannel+0xb4>
 8001576:	e089      	b.n	800168c <HAL_ADC_ConfigChannel+0x1c8>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2204      	movs	r2, #4
 800157e:	4013      	ands	r3, r2
 8001580:	d000      	beq.n	8001584 <HAL_ADC_ConfigChannel+0xc0>
 8001582:	e081      	b.n	8001688 <HAL_ADC_ConfigChannel+0x1c4>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2208      	movs	r2, #8
 800158a:	4013      	ands	r3, r2
 800158c:	d000      	beq.n	8001590 <HAL_ADC_ConfigChannel+0xcc>
 800158e:	e079      	b.n	8001684 <HAL_ADC_ConfigChannel+0x1c0>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2210      	movs	r2, #16
 8001596:	4013      	ands	r3, r2
 8001598:	d000      	beq.n	800159c <HAL_ADC_ConfigChannel+0xd8>
 800159a:	e071      	b.n	8001680 <HAL_ADC_ConfigChannel+0x1bc>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2220      	movs	r2, #32
 80015a2:	4013      	ands	r3, r2
 80015a4:	d000      	beq.n	80015a8 <HAL_ADC_ConfigChannel+0xe4>
 80015a6:	e069      	b.n	800167c <HAL_ADC_ConfigChannel+0x1b8>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2240      	movs	r2, #64	; 0x40
 80015ae:	4013      	ands	r3, r2
 80015b0:	d000      	beq.n	80015b4 <HAL_ADC_ConfigChannel+0xf0>
 80015b2:	e061      	b.n	8001678 <HAL_ADC_ConfigChannel+0x1b4>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2280      	movs	r2, #128	; 0x80
 80015ba:	4013      	ands	r3, r2
 80015bc:	d000      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0xfc>
 80015be:	e059      	b.n	8001674 <HAL_ADC_ConfigChannel+0x1b0>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	4013      	ands	r3, r2
 80015ca:	d151      	bne.n	8001670 <HAL_ADC_ConfigChannel+0x1ac>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4013      	ands	r3, r2
 80015d6:	d149      	bne.n	800166c <HAL_ADC_ConfigChannel+0x1a8>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	4013      	ands	r3, r2
 80015e2:	d141      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x1a4>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	4013      	ands	r3, r2
 80015ee:	d139      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x1a0>
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	015b      	lsls	r3, r3, #5
 80015f8:	4013      	ands	r3, r2
 80015fa:	d131      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x19c>
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	019b      	lsls	r3, r3, #6
 8001604:	4013      	ands	r3, r2
 8001606:	d129      	bne.n	800165c <HAL_ADC_ConfigChannel+0x198>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	01db      	lsls	r3, r3, #7
 8001610:	4013      	ands	r3, r2
 8001612:	d121      	bne.n	8001658 <HAL_ADC_ConfigChannel+0x194>
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	4013      	ands	r3, r2
 800161e:	d119      	bne.n	8001654 <HAL_ADC_ConfigChannel+0x190>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	025b      	lsls	r3, r3, #9
 8001628:	4013      	ands	r3, r2
 800162a:	d111      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x18c>
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	029b      	lsls	r3, r3, #10
 8001634:	4013      	ands	r3, r2
 8001636:	d109      	bne.n	800164c <HAL_ADC_ConfigChannel+0x188>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	02db      	lsls	r3, r3, #11
 8001640:	4013      	ands	r3, r2
 8001642:	d001      	beq.n	8001648 <HAL_ADC_ConfigChannel+0x184>
 8001644:	2312      	movs	r3, #18
 8001646:	e024      	b.n	8001692 <HAL_ADC_ConfigChannel+0x1ce>
 8001648:	2300      	movs	r3, #0
 800164a:	e022      	b.n	8001692 <HAL_ADC_ConfigChannel+0x1ce>
 800164c:	2311      	movs	r3, #17
 800164e:	e020      	b.n	8001692 <HAL_ADC_ConfigChannel+0x1ce>
 8001650:	2310      	movs	r3, #16
 8001652:	e01e      	b.n	8001692 <HAL_ADC_ConfigChannel+0x1ce>
 8001654:	230f      	movs	r3, #15
 8001656:	e01c      	b.n	8001692 <HAL_ADC_ConfigChannel+0x1ce>
 8001658:	230e      	movs	r3, #14
 800165a:	e01a      	b.n	8001692 <HAL_ADC_ConfigChannel+0x1ce>
 800165c:	230d      	movs	r3, #13
 800165e:	e018      	b.n	8001692 <HAL_ADC_ConfigChannel+0x1ce>
 8001660:	230c      	movs	r3, #12
 8001662:	e016      	b.n	8001692 <HAL_ADC_ConfigChannel+0x1ce>
 8001664:	230b      	movs	r3, #11
 8001666:	e014      	b.n	8001692 <HAL_ADC_ConfigChannel+0x1ce>
 8001668:	230a      	movs	r3, #10
 800166a:	e012      	b.n	8001692 <HAL_ADC_ConfigChannel+0x1ce>
 800166c:	2309      	movs	r3, #9
 800166e:	e010      	b.n	8001692 <HAL_ADC_ConfigChannel+0x1ce>
 8001670:	2308      	movs	r3, #8
 8001672:	e00e      	b.n	8001692 <HAL_ADC_ConfigChannel+0x1ce>
 8001674:	2307      	movs	r3, #7
 8001676:	e00c      	b.n	8001692 <HAL_ADC_ConfigChannel+0x1ce>
 8001678:	2306      	movs	r3, #6
 800167a:	e00a      	b.n	8001692 <HAL_ADC_ConfigChannel+0x1ce>
 800167c:	2305      	movs	r3, #5
 800167e:	e008      	b.n	8001692 <HAL_ADC_ConfigChannel+0x1ce>
 8001680:	2304      	movs	r3, #4
 8001682:	e006      	b.n	8001692 <HAL_ADC_ConfigChannel+0x1ce>
 8001684:	2303      	movs	r3, #3
 8001686:	e004      	b.n	8001692 <HAL_ADC_ConfigChannel+0x1ce>
 8001688:	2302      	movs	r3, #2
 800168a:	e002      	b.n	8001692 <HAL_ADC_ConfigChannel+0x1ce>
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <HAL_ADC_ConfigChannel+0x1ce>
 8001690:	2300      	movs	r3, #0
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	6852      	ldr	r2, [r2, #4]
 8001696:	201f      	movs	r0, #31
 8001698:	4002      	ands	r2, r0
 800169a:	4093      	lsls	r3, r2
 800169c:	000a      	movs	r2, r1
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	089b      	lsrs	r3, r3, #2
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d808      	bhi.n	80016c6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6818      	ldr	r0, [r3, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	6859      	ldr	r1, [r3, #4]
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	001a      	movs	r2, r3
 80016c2:	f7ff fb71 	bl	8000da8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	6819      	ldr	r1, [r3, #0]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	001a      	movs	r2, r3
 80016d4:	f7ff fbb8 	bl	8000e48 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	db00      	blt.n	80016e2 <HAL_ADC_ConfigChannel+0x21e>
 80016e0:	e0bc      	b.n	800185c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016e2:	4b50      	ldr	r3, [pc, #320]	; (8001824 <HAL_ADC_ConfigChannel+0x360>)
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7ff fb0d 	bl	8000d04 <LL_ADC_GetCommonPathInternalCh>
 80016ea:	0003      	movs	r3, r0
 80016ec:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a4d      	ldr	r2, [pc, #308]	; (8001828 <HAL_ADC_ConfigChannel+0x364>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d122      	bne.n	800173e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	2380      	movs	r3, #128	; 0x80
 80016fc:	041b      	lsls	r3, r3, #16
 80016fe:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001700:	d11d      	bne.n	800173e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	2280      	movs	r2, #128	; 0x80
 8001706:	0412      	lsls	r2, r2, #16
 8001708:	4313      	orrs	r3, r2
 800170a:	4a46      	ldr	r2, [pc, #280]	; (8001824 <HAL_ADC_ConfigChannel+0x360>)
 800170c:	0019      	movs	r1, r3
 800170e:	0010      	movs	r0, r2
 8001710:	f7ff fae4 	bl	8000cdc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001714:	4b45      	ldr	r3, [pc, #276]	; (800182c <HAL_ADC_ConfigChannel+0x368>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4945      	ldr	r1, [pc, #276]	; (8001830 <HAL_ADC_ConfigChannel+0x36c>)
 800171a:	0018      	movs	r0, r3
 800171c:	f7fe fcf0 	bl	8000100 <__udivsi3>
 8001720:	0003      	movs	r3, r0
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	0013      	movs	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	189b      	adds	r3, r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800172e:	e002      	b.n	8001736 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3b01      	subs	r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f9      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800173c:	e08e      	b.n	800185c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a3c      	ldr	r2, [pc, #240]	; (8001834 <HAL_ADC_ConfigChannel+0x370>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d10e      	bne.n	8001766 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	045b      	lsls	r3, r3, #17
 800174e:	4013      	ands	r3, r2
 8001750:	d109      	bne.n	8001766 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	0452      	lsls	r2, r2, #17
 8001758:	4313      	orrs	r3, r2
 800175a:	4a32      	ldr	r2, [pc, #200]	; (8001824 <HAL_ADC_ConfigChannel+0x360>)
 800175c:	0019      	movs	r1, r3
 800175e:	0010      	movs	r0, r2
 8001760:	f7ff fabc 	bl	8000cdc <LL_ADC_SetCommonPathInternalCh>
 8001764:	e07a      	b.n	800185c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a33      	ldr	r2, [pc, #204]	; (8001838 <HAL_ADC_ConfigChannel+0x374>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d000      	beq.n	8001772 <HAL_ADC_ConfigChannel+0x2ae>
 8001770:	e074      	b.n	800185c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	03db      	lsls	r3, r3, #15
 8001778:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800177a:	d000      	beq.n	800177e <HAL_ADC_ConfigChannel+0x2ba>
 800177c:	e06e      	b.n	800185c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	2280      	movs	r2, #128	; 0x80
 8001782:	03d2      	lsls	r2, r2, #15
 8001784:	4313      	orrs	r3, r2
 8001786:	4a27      	ldr	r2, [pc, #156]	; (8001824 <HAL_ADC_ConfigChannel+0x360>)
 8001788:	0019      	movs	r1, r3
 800178a:	0010      	movs	r0, r2
 800178c:	f7ff faa6 	bl	8000cdc <LL_ADC_SetCommonPathInternalCh>
 8001790:	e064      	b.n	800185c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691a      	ldr	r2, [r3, #16]
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	061b      	lsls	r3, r3, #24
 800179a:	429a      	cmp	r2, r3
 800179c:	d004      	beq.n	80017a8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80017a2:	4a1f      	ldr	r2, [pc, #124]	; (8001820 <HAL_ADC_ConfigChannel+0x35c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d107      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	0019      	movs	r1, r3
 80017b2:	0010      	movs	r0, r2
 80017b4:	f7ff fb29 	bl	8000e0a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	da4d      	bge.n	800185c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <HAL_ADC_ConfigChannel+0x360>)
 80017c2:	0018      	movs	r0, r3
 80017c4:	f7ff fa9e 	bl	8000d04 <LL_ADC_GetCommonPathInternalCh>
 80017c8:	0003      	movs	r3, r0
 80017ca:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a15      	ldr	r2, [pc, #84]	; (8001828 <HAL_ADC_ConfigChannel+0x364>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d108      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	4a18      	ldr	r2, [pc, #96]	; (800183c <HAL_ADC_ConfigChannel+0x378>)
 80017da:	4013      	ands	r3, r2
 80017dc:	4a11      	ldr	r2, [pc, #68]	; (8001824 <HAL_ADC_ConfigChannel+0x360>)
 80017de:	0019      	movs	r1, r3
 80017e0:	0010      	movs	r0, r2
 80017e2:	f7ff fa7b 	bl	8000cdc <LL_ADC_SetCommonPathInternalCh>
 80017e6:	e039      	b.n	800185c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a11      	ldr	r2, [pc, #68]	; (8001834 <HAL_ADC_ConfigChannel+0x370>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d108      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	4a12      	ldr	r2, [pc, #72]	; (8001840 <HAL_ADC_ConfigChannel+0x37c>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <HAL_ADC_ConfigChannel+0x360>)
 80017fa:	0019      	movs	r1, r3
 80017fc:	0010      	movs	r0, r2
 80017fe:	f7ff fa6d 	bl	8000cdc <LL_ADC_SetCommonPathInternalCh>
 8001802:	e02b      	b.n	800185c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <HAL_ADC_ConfigChannel+0x374>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d126      	bne.n	800185c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4a0c      	ldr	r2, [pc, #48]	; (8001844 <HAL_ADC_ConfigChannel+0x380>)
 8001812:	4013      	ands	r3, r2
 8001814:	4a03      	ldr	r2, [pc, #12]	; (8001824 <HAL_ADC_ConfigChannel+0x360>)
 8001816:	0019      	movs	r1, r3
 8001818:	0010      	movs	r0, r2
 800181a:	f7ff fa5f 	bl	8000cdc <LL_ADC_SetCommonPathInternalCh>
 800181e:	e01d      	b.n	800185c <HAL_ADC_ConfigChannel+0x398>
 8001820:	80000004 	.word	0x80000004
 8001824:	40012708 	.word	0x40012708
 8001828:	b0001000 	.word	0xb0001000
 800182c:	20000000 	.word	0x20000000
 8001830:	00030d40 	.word	0x00030d40
 8001834:	b8004000 	.word	0xb8004000
 8001838:	b4002000 	.word	0xb4002000
 800183c:	ff7fffff 	.word	0xff7fffff
 8001840:	feffffff 	.word	0xfeffffff
 8001844:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184c:	2220      	movs	r2, #32
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001854:	2317      	movs	r3, #23
 8001856:	18fb      	adds	r3, r7, r3
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2254      	movs	r2, #84	; 0x54
 8001860:	2100      	movs	r1, #0
 8001862:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001864:	2317      	movs	r3, #23
 8001866:	18fb      	adds	r3, r7, r3
 8001868:	781b      	ldrb	r3, [r3, #0]
}
 800186a:	0018      	movs	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	b006      	add	sp, #24
 8001870:	bd80      	pop	{r7, pc}
 8001872:	46c0      	nop			; (mov r8, r8)

08001874 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800187c:	46c0      	nop			; (mov r8, r8)
 800187e:	46bd      	mov	sp, r7
 8001880:	b002      	add	sp, #8
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800188c:	46c0      	nop			; (mov r8, r8)
 800188e:	46bd      	mov	sp, r7
 8001890:	b002      	add	sp, #8
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800189c:	46c0      	nop			; (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	b002      	add	sp, #8
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80018ac:	46c0      	nop			; (mov r8, r8)
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b002      	add	sp, #8
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	0002      	movs	r2, r0
 80018bc:	1dfb      	adds	r3, r7, #7
 80018be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	1dfb      	adds	r3, r7, #7
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b7f      	cmp	r3, #127	; 0x7f
 80018c6:	d809      	bhi.n	80018dc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c8:	1dfb      	adds	r3, r7, #7
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	001a      	movs	r2, r3
 80018ce:	231f      	movs	r3, #31
 80018d0:	401a      	ands	r2, r3
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <__NVIC_EnableIRQ+0x30>)
 80018d4:	2101      	movs	r1, #1
 80018d6:	4091      	lsls	r1, r2
 80018d8:	000a      	movs	r2, r1
 80018da:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80018dc:	46c0      	nop			; (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	b002      	add	sp, #8
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	e000e100 	.word	0xe000e100

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b590      	push	{r4, r7, lr}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	0002      	movs	r2, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	1dfb      	adds	r3, r7, #7
 80018f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018f6:	1dfb      	adds	r3, r7, #7
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b7f      	cmp	r3, #127	; 0x7f
 80018fc:	d828      	bhi.n	8001950 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018fe:	4a2f      	ldr	r2, [pc, #188]	; (80019bc <__NVIC_SetPriority+0xd4>)
 8001900:	1dfb      	adds	r3, r7, #7
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	b25b      	sxtb	r3, r3
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	33c0      	adds	r3, #192	; 0xc0
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	589b      	ldr	r3, [r3, r2]
 800190e:	1dfa      	adds	r2, r7, #7
 8001910:	7812      	ldrb	r2, [r2, #0]
 8001912:	0011      	movs	r1, r2
 8001914:	2203      	movs	r2, #3
 8001916:	400a      	ands	r2, r1
 8001918:	00d2      	lsls	r2, r2, #3
 800191a:	21ff      	movs	r1, #255	; 0xff
 800191c:	4091      	lsls	r1, r2
 800191e:	000a      	movs	r2, r1
 8001920:	43d2      	mvns	r2, r2
 8001922:	401a      	ands	r2, r3
 8001924:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	019b      	lsls	r3, r3, #6
 800192a:	22ff      	movs	r2, #255	; 0xff
 800192c:	401a      	ands	r2, r3
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	0018      	movs	r0, r3
 8001934:	2303      	movs	r3, #3
 8001936:	4003      	ands	r3, r0
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800193c:	481f      	ldr	r0, [pc, #124]	; (80019bc <__NVIC_SetPriority+0xd4>)
 800193e:	1dfb      	adds	r3, r7, #7
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	b25b      	sxtb	r3, r3
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	430a      	orrs	r2, r1
 8001948:	33c0      	adds	r3, #192	; 0xc0
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800194e:	e031      	b.n	80019b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001950:	4a1b      	ldr	r2, [pc, #108]	; (80019c0 <__NVIC_SetPriority+0xd8>)
 8001952:	1dfb      	adds	r3, r7, #7
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	0019      	movs	r1, r3
 8001958:	230f      	movs	r3, #15
 800195a:	400b      	ands	r3, r1
 800195c:	3b08      	subs	r3, #8
 800195e:	089b      	lsrs	r3, r3, #2
 8001960:	3306      	adds	r3, #6
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	18d3      	adds	r3, r2, r3
 8001966:	3304      	adds	r3, #4
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	1dfa      	adds	r2, r7, #7
 800196c:	7812      	ldrb	r2, [r2, #0]
 800196e:	0011      	movs	r1, r2
 8001970:	2203      	movs	r2, #3
 8001972:	400a      	ands	r2, r1
 8001974:	00d2      	lsls	r2, r2, #3
 8001976:	21ff      	movs	r1, #255	; 0xff
 8001978:	4091      	lsls	r1, r2
 800197a:	000a      	movs	r2, r1
 800197c:	43d2      	mvns	r2, r2
 800197e:	401a      	ands	r2, r3
 8001980:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	019b      	lsls	r3, r3, #6
 8001986:	22ff      	movs	r2, #255	; 0xff
 8001988:	401a      	ands	r2, r3
 800198a:	1dfb      	adds	r3, r7, #7
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	0018      	movs	r0, r3
 8001990:	2303      	movs	r3, #3
 8001992:	4003      	ands	r3, r0
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001998:	4809      	ldr	r0, [pc, #36]	; (80019c0 <__NVIC_SetPriority+0xd8>)
 800199a:	1dfb      	adds	r3, r7, #7
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	001c      	movs	r4, r3
 80019a0:	230f      	movs	r3, #15
 80019a2:	4023      	ands	r3, r4
 80019a4:	3b08      	subs	r3, #8
 80019a6:	089b      	lsrs	r3, r3, #2
 80019a8:	430a      	orrs	r2, r1
 80019aa:	3306      	adds	r3, #6
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	18c3      	adds	r3, r0, r3
 80019b0:	3304      	adds	r3, #4
 80019b2:	601a      	str	r2, [r3, #0]
}
 80019b4:	46c0      	nop			; (mov r8, r8)
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b003      	add	sp, #12
 80019ba:	bd90      	pop	{r4, r7, pc}
 80019bc:	e000e100 	.word	0xe000e100
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	1e5a      	subs	r2, r3, #1
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	045b      	lsls	r3, r3, #17
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d301      	bcc.n	80019dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d8:	2301      	movs	r3, #1
 80019da:	e010      	b.n	80019fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <SysTick_Config+0x44>)
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	3a01      	subs	r2, #1
 80019e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e4:	2301      	movs	r3, #1
 80019e6:	425b      	negs	r3, r3
 80019e8:	2103      	movs	r1, #3
 80019ea:	0018      	movs	r0, r3
 80019ec:	f7ff ff7c 	bl	80018e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <SysTick_Config+0x44>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f6:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <SysTick_Config+0x44>)
 80019f8:	2207      	movs	r2, #7
 80019fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	0018      	movs	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b002      	add	sp, #8
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	e000e010 	.word	0xe000e010

08001a0c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	210f      	movs	r1, #15
 8001a18:	187b      	adds	r3, r7, r1
 8001a1a:	1c02      	adds	r2, r0, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	187b      	adds	r3, r7, r1
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b25b      	sxtb	r3, r3
 8001a26:	0011      	movs	r1, r2
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f7ff ff5d 	bl	80018e8 <__NVIC_SetPriority>
}
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	46bd      	mov	sp, r7
 8001a32:	b004      	add	sp, #16
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	0002      	movs	r2, r0
 8001a3e:	1dfb      	adds	r3, r7, #7
 8001a40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a42:	1dfb      	adds	r3, r7, #7
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	b25b      	sxtb	r3, r3
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f7ff ff33 	bl	80018b4 <__NVIC_EnableIRQ>
}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b002      	add	sp, #8
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	0018      	movs	r0, r3
 8001a62:	f7ff ffaf 	bl	80019c4 <SysTick_Config>
 8001a66:	0003      	movs	r3, r0
}
 8001a68:	0018      	movs	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b002      	add	sp, #8
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e077      	b.n	8001b72 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a3d      	ldr	r2, [pc, #244]	; (8001b7c <HAL_DMA_Init+0x10c>)
 8001a88:	4694      	mov	ip, r2
 8001a8a:	4463      	add	r3, ip
 8001a8c:	2114      	movs	r1, #20
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f7fe fb36 	bl	8000100 <__udivsi3>
 8001a94:	0003      	movs	r3, r0
 8001a96:	009a      	lsls	r2, r3, #2
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2225      	movs	r2, #37	; 0x25
 8001aa0:	2102      	movs	r1, #2
 8001aa2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4934      	ldr	r1, [pc, #208]	; (8001b80 <HAL_DMA_Init+0x110>)
 8001ab0:	400a      	ands	r2, r1
 8001ab2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6819      	ldr	r1, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	0018      	movs	r0, r3
 8001aee:	f000 f8fb 	bl	8001ce8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	01db      	lsls	r3, r3, #7
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d102      	bne.n	8001b04 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0c:	213f      	movs	r1, #63	; 0x3f
 8001b0e:	400a      	ands	r2, r1
 8001b10:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b1a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d011      	beq.n	8001b48 <HAL_DMA_Init+0xd8>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d80d      	bhi.n	8001b48 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f000 f906 	bl	8001d40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	e008      	b.n	8001b5a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2225      	movs	r2, #37	; 0x25
 8001b64:	2101      	movs	r1, #1
 8001b66:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2224      	movs	r2, #36	; 0x24
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	0018      	movs	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b002      	add	sp, #8
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	bffdfff8 	.word	0xbffdfff8
 8001b80:	ffff800f 	.word	0xffff800f

08001b84 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001b8c:	4b55      	ldr	r3, [pc, #340]	; (8001ce4 <HAL_DMA_IRQHandler+0x160>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	221c      	movs	r2, #28
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	0013      	movs	r3, r2
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4013      	ands	r3, r2
 8001bac:	d027      	beq.n	8001bfe <HAL_DMA_IRQHandler+0x7a>
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d023      	beq.n	8001bfe <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d107      	bne.n	8001bd2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2104      	movs	r1, #4
 8001bce:	438a      	bics	r2, r1
 8001bd0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001bd2:	4b44      	ldr	r3, [pc, #272]	; (8001ce4 <HAL_DMA_IRQHandler+0x160>)
 8001bd4:	6859      	ldr	r1, [r3, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	221c      	movs	r2, #28
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2204      	movs	r2, #4
 8001be0:	409a      	lsls	r2, r3
 8001be2:	4b40      	ldr	r3, [pc, #256]	; (8001ce4 <HAL_DMA_IRQHandler+0x160>)
 8001be4:	430a      	orrs	r2, r1
 8001be6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d100      	bne.n	8001bf2 <HAL_DMA_IRQHandler+0x6e>
 8001bf0:	e073      	b.n	8001cda <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	0010      	movs	r0, r2
 8001bfa:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001bfc:	e06d      	b.n	8001cda <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	221c      	movs	r2, #28
 8001c04:	4013      	ands	r3, r2
 8001c06:	2202      	movs	r2, #2
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	0013      	movs	r3, r2
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d02e      	beq.n	8001c70 <HAL_DMA_IRQHandler+0xec>
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2202      	movs	r2, #2
 8001c16:	4013      	ands	r3, r2
 8001c18:	d02a      	beq.n	8001c70 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2220      	movs	r2, #32
 8001c22:	4013      	ands	r3, r2
 8001c24:	d10b      	bne.n	8001c3e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	210a      	movs	r1, #10
 8001c32:	438a      	bics	r2, r1
 8001c34:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2225      	movs	r2, #37	; 0x25
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001c3e:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <HAL_DMA_IRQHandler+0x160>)
 8001c40:	6859      	ldr	r1, [r3, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	221c      	movs	r2, #28
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	4b25      	ldr	r3, [pc, #148]	; (8001ce4 <HAL_DMA_IRQHandler+0x160>)
 8001c50:	430a      	orrs	r2, r1
 8001c52:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2224      	movs	r2, #36	; 0x24
 8001c58:	2100      	movs	r1, #0
 8001c5a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d03a      	beq.n	8001cda <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	0010      	movs	r0, r2
 8001c6c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001c6e:	e034      	b.n	8001cda <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	221c      	movs	r2, #28
 8001c76:	4013      	ands	r3, r2
 8001c78:	2208      	movs	r2, #8
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	0013      	movs	r3, r2
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	4013      	ands	r3, r2
 8001c82:	d02b      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x158>
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	2208      	movs	r2, #8
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d027      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	210e      	movs	r1, #14
 8001c98:	438a      	bics	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <HAL_DMA_IRQHandler+0x160>)
 8001c9e:	6859      	ldr	r1, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	221c      	movs	r2, #28
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2201      	movs	r2, #1
 8001caa:	409a      	lsls	r2, r3
 8001cac:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <HAL_DMA_IRQHandler+0x160>)
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2225      	movs	r2, #37	; 0x25
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2224      	movs	r2, #36	; 0x24
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	0010      	movs	r0, r2
 8001cd8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	46c0      	nop			; (mov r8, r8)
}
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b004      	add	sp, #16
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40020000 	.word	0x40020000

08001ce8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	089b      	lsrs	r3, r3, #2
 8001cf6:	4a10      	ldr	r2, [pc, #64]	; (8001d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001cf8:	4694      	mov	ip, r2
 8001cfa:	4463      	add	r3, ip
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	001a      	movs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	001a      	movs	r2, r3
 8001d0a:	23ff      	movs	r3, #255	; 0xff
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	3b08      	subs	r3, #8
 8001d10:	2114      	movs	r1, #20
 8001d12:	0018      	movs	r0, r3
 8001d14:	f7fe f9f4 	bl	8000100 <__udivsi3>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a07      	ldr	r2, [pc, #28]	; (8001d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001d20:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	221f      	movs	r2, #31
 8001d26:	4013      	ands	r3, r2
 8001d28:	2201      	movs	r2, #1
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001d30:	46c0      	nop			; (mov r8, r8)
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b004      	add	sp, #16
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	10008200 	.word	0x10008200
 8001d3c:	40020880 	.word	0x40020880

08001d40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	223f      	movs	r2, #63	; 0x3f
 8001d4e:	4013      	ands	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001d56:	4694      	mov	ip, r2
 8001d58:	4463      	add	r3, ip
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	001a      	movs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a07      	ldr	r2, [pc, #28]	; (8001d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001d66:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2201      	movs	r2, #1
 8001d72:	409a      	lsls	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001d78:	46c0      	nop			; (mov r8, r8)
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b004      	add	sp, #16
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	1000823f 	.word	0x1000823f
 8001d84:	40020940 	.word	0x40020940

08001d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d96:	e147      	b.n	8002028 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4091      	lsls	r1, r2
 8001da2:	000a      	movs	r2, r1
 8001da4:	4013      	ands	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d100      	bne.n	8001db0 <HAL_GPIO_Init+0x28>
 8001dae:	e138      	b.n	8002022 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2203      	movs	r2, #3
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d005      	beq.n	8001dc8 <HAL_GPIO_Init+0x40>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d130      	bne.n	8001e2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	0013      	movs	r3, r2
 8001dd8:	43da      	mvns	r2, r3
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	409a      	lsls	r2, r3
 8001dea:	0013      	movs	r3, r2
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dfe:	2201      	movs	r2, #1
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	409a      	lsls	r2, r3
 8001e04:	0013      	movs	r3, r2
 8001e06:	43da      	mvns	r2, r3
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	091b      	lsrs	r3, r3, #4
 8001e14:	2201      	movs	r2, #1
 8001e16:	401a      	ands	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	0013      	movs	r3, r2
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2203      	movs	r2, #3
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d017      	beq.n	8001e66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	2203      	movs	r2, #3
 8001e42:	409a      	lsls	r2, r3
 8001e44:	0013      	movs	r3, r2
 8001e46:	43da      	mvns	r2, r3
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	409a      	lsls	r2, r3
 8001e58:	0013      	movs	r3, r2
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d123      	bne.n	8001eba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	08da      	lsrs	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3208      	adds	r2, #8
 8001e7a:	0092      	lsls	r2, r2, #2
 8001e7c:	58d3      	ldr	r3, [r2, r3]
 8001e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2207      	movs	r2, #7
 8001e84:	4013      	ands	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	220f      	movs	r2, #15
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	0013      	movs	r3, r2
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4013      	ands	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2107      	movs	r1, #7
 8001e9e:	400b      	ands	r3, r1
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	0013      	movs	r3, r2
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	08da      	lsrs	r2, r3, #3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3208      	adds	r2, #8
 8001eb4:	0092      	lsls	r2, r2, #2
 8001eb6:	6939      	ldr	r1, [r7, #16]
 8001eb8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	0013      	movs	r3, r2
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	401a      	ands	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	0013      	movs	r3, r2
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	23c0      	movs	r3, #192	; 0xc0
 8001ef4:	029b      	lsls	r3, r3, #10
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d100      	bne.n	8001efc <HAL_GPIO_Init+0x174>
 8001efa:	e092      	b.n	8002022 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001efc:	4a50      	ldr	r2, [pc, #320]	; (8002040 <HAL_GPIO_Init+0x2b8>)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	3318      	adds	r3, #24
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	589b      	ldr	r3, [r3, r2]
 8001f08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	4013      	ands	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	220f      	movs	r2, #15
 8001f14:	409a      	lsls	r2, r3
 8001f16:	0013      	movs	r3, r2
 8001f18:	43da      	mvns	r2, r3
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	23a0      	movs	r3, #160	; 0xa0
 8001f24:	05db      	lsls	r3, r3, #23
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d013      	beq.n	8001f52 <HAL_GPIO_Init+0x1ca>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a45      	ldr	r2, [pc, #276]	; (8002044 <HAL_GPIO_Init+0x2bc>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00d      	beq.n	8001f4e <HAL_GPIO_Init+0x1c6>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a44      	ldr	r2, [pc, #272]	; (8002048 <HAL_GPIO_Init+0x2c0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d007      	beq.n	8001f4a <HAL_GPIO_Init+0x1c2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a43      	ldr	r2, [pc, #268]	; (800204c <HAL_GPIO_Init+0x2c4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d101      	bne.n	8001f46 <HAL_GPIO_Init+0x1be>
 8001f42:	2303      	movs	r3, #3
 8001f44:	e006      	b.n	8001f54 <HAL_GPIO_Init+0x1cc>
 8001f46:	2305      	movs	r3, #5
 8001f48:	e004      	b.n	8001f54 <HAL_GPIO_Init+0x1cc>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e002      	b.n	8001f54 <HAL_GPIO_Init+0x1cc>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <HAL_GPIO_Init+0x1cc>
 8001f52:	2300      	movs	r3, #0
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	2103      	movs	r1, #3
 8001f58:	400a      	ands	r2, r1
 8001f5a:	00d2      	lsls	r2, r2, #3
 8001f5c:	4093      	lsls	r3, r2
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001f64:	4936      	ldr	r1, [pc, #216]	; (8002040 <HAL_GPIO_Init+0x2b8>)
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	089b      	lsrs	r3, r3, #2
 8001f6a:	3318      	adds	r3, #24
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f72:	4b33      	ldr	r3, [pc, #204]	; (8002040 <HAL_GPIO_Init+0x2b8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	035b      	lsls	r3, r3, #13
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f96:	4b2a      	ldr	r3, [pc, #168]	; (8002040 <HAL_GPIO_Init+0x2b8>)
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001f9c:	4b28      	ldr	r3, [pc, #160]	; (8002040 <HAL_GPIO_Init+0x2b8>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	43da      	mvns	r2, r3
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	039b      	lsls	r3, r3, #14
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fc0:	4b1f      	ldr	r3, [pc, #124]	; (8002040 <HAL_GPIO_Init+0x2b8>)
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fc6:	4a1e      	ldr	r2, [pc, #120]	; (8002040 <HAL_GPIO_Init+0x2b8>)
 8001fc8:	2384      	movs	r3, #132	; 0x84
 8001fca:	58d3      	ldr	r3, [r2, r3]
 8001fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	43da      	mvns	r2, r3
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	2380      	movs	r3, #128	; 0x80
 8001fde:	029b      	lsls	r3, r3, #10
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fec:	4914      	ldr	r1, [pc, #80]	; (8002040 <HAL_GPIO_Init+0x2b8>)
 8001fee:	2284      	movs	r2, #132	; 0x84
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001ff4:	4a12      	ldr	r2, [pc, #72]	; (8002040 <HAL_GPIO_Init+0x2b8>)
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	58d3      	ldr	r3, [r2, r3]
 8001ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	43da      	mvns	r2, r3
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	025b      	lsls	r3, r3, #9
 800200e:	4013      	ands	r3, r2
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800201a:	4909      	ldr	r1, [pc, #36]	; (8002040 <HAL_GPIO_Init+0x2b8>)
 800201c:	2280      	movs	r2, #128	; 0x80
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	3301      	adds	r3, #1
 8002026:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	40da      	lsrs	r2, r3
 8002030:	1e13      	subs	r3, r2, #0
 8002032:	d000      	beq.n	8002036 <HAL_GPIO_Init+0x2ae>
 8002034:	e6b0      	b.n	8001d98 <HAL_GPIO_Init+0x10>
  }
}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	46c0      	nop			; (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	b006      	add	sp, #24
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40021800 	.word	0x40021800
 8002044:	50000400 	.word	0x50000400
 8002048:	50000800 	.word	0x50000800
 800204c:	50000c00 	.word	0x50000c00

08002050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	0008      	movs	r0, r1
 800205a:	0011      	movs	r1, r2
 800205c:	1cbb      	adds	r3, r7, #2
 800205e:	1c02      	adds	r2, r0, #0
 8002060:	801a      	strh	r2, [r3, #0]
 8002062:	1c7b      	adds	r3, r7, #1
 8002064:	1c0a      	adds	r2, r1, #0
 8002066:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002068:	1c7b      	adds	r3, r7, #1
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d004      	beq.n	800207a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002070:	1cbb      	adds	r3, r7, #2
 8002072:	881a      	ldrh	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002078:	e003      	b.n	8002082 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800207a:	1cbb      	adds	r3, r7, #2
 800207c:	881a      	ldrh	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	46bd      	mov	sp, r7
 8002086:	b002      	add	sp, #8
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	0002      	movs	r2, r0
 8002094:	1dbb      	adds	r3, r7, #6
 8002096:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002098:	4b10      	ldr	r3, [pc, #64]	; (80020dc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	1dba      	adds	r2, r7, #6
 800209e:	8812      	ldrh	r2, [r2, #0]
 80020a0:	4013      	ands	r3, r2
 80020a2:	d008      	beq.n	80020b6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80020a4:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80020a6:	1dba      	adds	r2, r7, #6
 80020a8:	8812      	ldrh	r2, [r2, #0]
 80020aa:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80020ac:	1dbb      	adds	r3, r7, #6
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f000 f815 	bl	80020e0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	1dba      	adds	r2, r7, #6
 80020bc:	8812      	ldrh	r2, [r2, #0]
 80020be:	4013      	ands	r3, r2
 80020c0:	d008      	beq.n	80020d4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80020c4:	1dba      	adds	r2, r7, #6
 80020c6:	8812      	ldrh	r2, [r2, #0]
 80020c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80020ca:	1dbb      	adds	r3, r7, #6
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	0018      	movs	r0, r3
 80020d0:	f000 f810 	bl	80020f4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80020d4:	46c0      	nop			; (mov r8, r8)
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b002      	add	sp, #8
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021800 	.word	0x40021800

080020e0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	0002      	movs	r2, r0
 80020e8:	1dbb      	adds	r3, r7, #6
 80020ea:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80020ec:	46c0      	nop			; (mov r8, r8)
 80020ee:	46bd      	mov	sp, r7
 80020f0:	b002      	add	sp, #8
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	0002      	movs	r2, r0
 80020fc:	1dbb      	adds	r3, r7, #6
 80020fe:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002100:	46c0      	nop			; (mov r8, r8)
 8002102:	46bd      	mov	sp, r7
 8002104:	b002      	add	sp, #8
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a19      	ldr	r2, [pc, #100]	; (800217c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002116:	4013      	ands	r3, r2
 8002118:	0019      	movs	r1, r3
 800211a:	4b17      	ldr	r3, [pc, #92]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	430a      	orrs	r2, r1
 8002120:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	429a      	cmp	r2, r3
 800212a:	d11f      	bne.n	800216c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800212c:	4b14      	ldr	r3, [pc, #80]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	0013      	movs	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	189b      	adds	r3, r3, r2
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4912      	ldr	r1, [pc, #72]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800213a:	0018      	movs	r0, r3
 800213c:	f7fd ffe0 	bl	8000100 <__udivsi3>
 8002140:	0003      	movs	r3, r0
 8002142:	3301      	adds	r3, #1
 8002144:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002146:	e008      	b.n	800215a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	3b01      	subs	r3, #1
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	e001      	b.n	800215a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e009      	b.n	800216e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800215a:	4b07      	ldr	r3, [pc, #28]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800215c:	695a      	ldr	r2, [r3, #20]
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	401a      	ands	r2, r3
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	429a      	cmp	r2, r3
 800216a:	d0ed      	beq.n	8002148 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	0018      	movs	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	b004      	add	sp, #16
 8002174:	bd80      	pop	{r7, pc}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	40007000 	.word	0x40007000
 800217c:	fffff9ff 	.word	0xfffff9ff
 8002180:	20000000 	.word	0x20000000
 8002184:	000f4240 	.word	0x000f4240

08002188 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e2f3      	b.n	8002782 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2201      	movs	r2, #1
 80021a0:	4013      	ands	r3, r2
 80021a2:	d100      	bne.n	80021a6 <HAL_RCC_OscConfig+0x1e>
 80021a4:	e07c      	b.n	80022a0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021a6:	4bc3      	ldr	r3, [pc, #780]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2238      	movs	r2, #56	; 0x38
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021b0:	4bc0      	ldr	r3, [pc, #768]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	2203      	movs	r2, #3
 80021b6:	4013      	ands	r3, r2
 80021b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	2b10      	cmp	r3, #16
 80021be:	d102      	bne.n	80021c6 <HAL_RCC_OscConfig+0x3e>
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d002      	beq.n	80021cc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d10b      	bne.n	80021e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021cc:	4bb9      	ldr	r3, [pc, #740]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	029b      	lsls	r3, r3, #10
 80021d4:	4013      	ands	r3, r2
 80021d6:	d062      	beq.n	800229e <HAL_RCC_OscConfig+0x116>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d15e      	bne.n	800229e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e2ce      	b.n	8002782 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	025b      	lsls	r3, r3, #9
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d107      	bne.n	8002200 <HAL_RCC_OscConfig+0x78>
 80021f0:	4bb0      	ldr	r3, [pc, #704]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4baf      	ldr	r3, [pc, #700]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 80021f6:	2180      	movs	r1, #128	; 0x80
 80021f8:	0249      	lsls	r1, r1, #9
 80021fa:	430a      	orrs	r2, r1
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	e020      	b.n	8002242 <HAL_RCC_OscConfig+0xba>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	23a0      	movs	r3, #160	; 0xa0
 8002206:	02db      	lsls	r3, r3, #11
 8002208:	429a      	cmp	r2, r3
 800220a:	d10e      	bne.n	800222a <HAL_RCC_OscConfig+0xa2>
 800220c:	4ba9      	ldr	r3, [pc, #676]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4ba8      	ldr	r3, [pc, #672]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 8002212:	2180      	movs	r1, #128	; 0x80
 8002214:	02c9      	lsls	r1, r1, #11
 8002216:	430a      	orrs	r2, r1
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	4ba6      	ldr	r3, [pc, #664]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	4ba5      	ldr	r3, [pc, #660]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 8002220:	2180      	movs	r1, #128	; 0x80
 8002222:	0249      	lsls	r1, r1, #9
 8002224:	430a      	orrs	r2, r1
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	e00b      	b.n	8002242 <HAL_RCC_OscConfig+0xba>
 800222a:	4ba2      	ldr	r3, [pc, #648]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	4ba1      	ldr	r3, [pc, #644]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 8002230:	49a1      	ldr	r1, [pc, #644]	; (80024b8 <HAL_RCC_OscConfig+0x330>)
 8002232:	400a      	ands	r2, r1
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	4b9f      	ldr	r3, [pc, #636]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	4b9e      	ldr	r3, [pc, #632]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 800223c:	499f      	ldr	r1, [pc, #636]	; (80024bc <HAL_RCC_OscConfig+0x334>)
 800223e:	400a      	ands	r2, r1
 8002240:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d014      	beq.n	8002274 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224a:	f7fe fd27 	bl	8000c9c <HAL_GetTick>
 800224e:	0003      	movs	r3, r0
 8002250:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002254:	f7fe fd22 	bl	8000c9c <HAL_GetTick>
 8002258:	0002      	movs	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b64      	cmp	r3, #100	; 0x64
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e28d      	b.n	8002782 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002266:	4b93      	ldr	r3, [pc, #588]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	029b      	lsls	r3, r3, #10
 800226e:	4013      	ands	r3, r2
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0xcc>
 8002272:	e015      	b.n	80022a0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7fe fd12 	bl	8000c9c <HAL_GetTick>
 8002278:	0003      	movs	r3, r0
 800227a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800227e:	f7fe fd0d 	bl	8000c9c <HAL_GetTick>
 8002282:	0002      	movs	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b64      	cmp	r3, #100	; 0x64
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e278      	b.n	8002782 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002290:	4b88      	ldr	r3, [pc, #544]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	029b      	lsls	r3, r3, #10
 8002298:	4013      	ands	r3, r2
 800229a:	d1f0      	bne.n	800227e <HAL_RCC_OscConfig+0xf6>
 800229c:	e000      	b.n	80022a0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2202      	movs	r2, #2
 80022a6:	4013      	ands	r3, r2
 80022a8:	d100      	bne.n	80022ac <HAL_RCC_OscConfig+0x124>
 80022aa:	e099      	b.n	80023e0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ac:	4b81      	ldr	r3, [pc, #516]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2238      	movs	r2, #56	; 0x38
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022b6:	4b7f      	ldr	r3, [pc, #508]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2203      	movs	r2, #3
 80022bc:	4013      	ands	r3, r2
 80022be:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2b10      	cmp	r3, #16
 80022c4:	d102      	bne.n	80022cc <HAL_RCC_OscConfig+0x144>
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d002      	beq.n	80022d2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d135      	bne.n	800233e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022d2:	4b78      	ldr	r3, [pc, #480]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4013      	ands	r3, r2
 80022dc:	d005      	beq.n	80022ea <HAL_RCC_OscConfig+0x162>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e24b      	b.n	8002782 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ea:	4b72      	ldr	r3, [pc, #456]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4a74      	ldr	r2, [pc, #464]	; (80024c0 <HAL_RCC_OscConfig+0x338>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	021a      	lsls	r2, r3, #8
 80022fa:	4b6e      	ldr	r3, [pc, #440]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 80022fc:	430a      	orrs	r2, r1
 80022fe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d112      	bne.n	800232c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002306:	4b6b      	ldr	r3, [pc, #428]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a6e      	ldr	r2, [pc, #440]	; (80024c4 <HAL_RCC_OscConfig+0x33c>)
 800230c:	4013      	ands	r3, r2
 800230e:	0019      	movs	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	4b67      	ldr	r3, [pc, #412]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 8002316:	430a      	orrs	r2, r1
 8002318:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800231a:	4b66      	ldr	r3, [pc, #408]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	0adb      	lsrs	r3, r3, #11
 8002320:	2207      	movs	r2, #7
 8002322:	4013      	ands	r3, r2
 8002324:	4a68      	ldr	r2, [pc, #416]	; (80024c8 <HAL_RCC_OscConfig+0x340>)
 8002326:	40da      	lsrs	r2, r3
 8002328:	4b68      	ldr	r3, [pc, #416]	; (80024cc <HAL_RCC_OscConfig+0x344>)
 800232a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800232c:	4b68      	ldr	r3, [pc, #416]	; (80024d0 <HAL_RCC_OscConfig+0x348>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	0018      	movs	r0, r3
 8002332:	f7fe fc57 	bl	8000be4 <HAL_InitTick>
 8002336:	1e03      	subs	r3, r0, #0
 8002338:	d051      	beq.n	80023de <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e221      	b.n	8002782 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d030      	beq.n	80023a8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002346:	4b5b      	ldr	r3, [pc, #364]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a5e      	ldr	r2, [pc, #376]	; (80024c4 <HAL_RCC_OscConfig+0x33c>)
 800234c:	4013      	ands	r3, r2
 800234e:	0019      	movs	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	4b57      	ldr	r3, [pc, #348]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 8002356:	430a      	orrs	r2, r1
 8002358:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800235a:	4b56      	ldr	r3, [pc, #344]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	4b55      	ldr	r3, [pc, #340]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 8002360:	2180      	movs	r1, #128	; 0x80
 8002362:	0049      	lsls	r1, r1, #1
 8002364:	430a      	orrs	r2, r1
 8002366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe fc98 	bl	8000c9c <HAL_GetTick>
 800236c:	0003      	movs	r3, r0
 800236e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002372:	f7fe fc93 	bl	8000c9c <HAL_GetTick>
 8002376:	0002      	movs	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e1fe      	b.n	8002782 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002384:	4b4b      	ldr	r3, [pc, #300]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4013      	ands	r3, r2
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002390:	4b48      	ldr	r3, [pc, #288]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	4a4a      	ldr	r2, [pc, #296]	; (80024c0 <HAL_RCC_OscConfig+0x338>)
 8002396:	4013      	ands	r3, r2
 8002398:	0019      	movs	r1, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	021a      	lsls	r2, r3, #8
 80023a0:	4b44      	ldr	r3, [pc, #272]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 80023a2:	430a      	orrs	r2, r1
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	e01b      	b.n	80023e0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80023a8:	4b42      	ldr	r3, [pc, #264]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b41      	ldr	r3, [pc, #260]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 80023ae:	4949      	ldr	r1, [pc, #292]	; (80024d4 <HAL_RCC_OscConfig+0x34c>)
 80023b0:	400a      	ands	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7fe fc72 	bl	8000c9c <HAL_GetTick>
 80023b8:	0003      	movs	r3, r0
 80023ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023be:	f7fe fc6d 	bl	8000c9c <HAL_GetTick>
 80023c2:	0002      	movs	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e1d8      	b.n	8002782 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023d0:	4b38      	ldr	r3, [pc, #224]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4013      	ands	r3, r2
 80023da:	d1f0      	bne.n	80023be <HAL_RCC_OscConfig+0x236>
 80023dc:	e000      	b.n	80023e0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2208      	movs	r2, #8
 80023e6:	4013      	ands	r3, r2
 80023e8:	d047      	beq.n	800247a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80023ea:	4b32      	ldr	r3, [pc, #200]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2238      	movs	r2, #56	; 0x38
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b18      	cmp	r3, #24
 80023f4:	d10a      	bne.n	800240c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80023f6:	4b2f      	ldr	r3, [pc, #188]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 80023f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fa:	2202      	movs	r2, #2
 80023fc:	4013      	ands	r3, r2
 80023fe:	d03c      	beq.n	800247a <HAL_RCC_OscConfig+0x2f2>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d138      	bne.n	800247a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e1ba      	b.n	8002782 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d019      	beq.n	8002448 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002414:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 8002416:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002418:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 800241a:	2101      	movs	r1, #1
 800241c:	430a      	orrs	r2, r1
 800241e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7fe fc3c 	bl	8000c9c <HAL_GetTick>
 8002424:	0003      	movs	r3, r0
 8002426:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242a:	f7fe fc37 	bl	8000c9c <HAL_GetTick>
 800242e:	0002      	movs	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e1a2      	b.n	8002782 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800243c:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 800243e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002440:	2202      	movs	r2, #2
 8002442:	4013      	ands	r3, r2
 8002444:	d0f1      	beq.n	800242a <HAL_RCC_OscConfig+0x2a2>
 8002446:	e018      	b.n	800247a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002448:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 800244a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800244c:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 800244e:	2101      	movs	r1, #1
 8002450:	438a      	bics	r2, r1
 8002452:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7fe fc22 	bl	8000c9c <HAL_GetTick>
 8002458:	0003      	movs	r3, r0
 800245a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800245e:	f7fe fc1d 	bl	8000c9c <HAL_GetTick>
 8002462:	0002      	movs	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e188      	b.n	8002782 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002470:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 8002472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002474:	2202      	movs	r2, #2
 8002476:	4013      	ands	r3, r2
 8002478:	d1f1      	bne.n	800245e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2204      	movs	r2, #4
 8002480:	4013      	ands	r3, r2
 8002482:	d100      	bne.n	8002486 <HAL_RCC_OscConfig+0x2fe>
 8002484:	e0c6      	b.n	8002614 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002486:	231f      	movs	r3, #31
 8002488:	18fb      	adds	r3, r7, r3
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2238      	movs	r2, #56	; 0x38
 8002494:	4013      	ands	r3, r2
 8002496:	2b20      	cmp	r3, #32
 8002498:	d11e      	bne.n	80024d8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_RCC_OscConfig+0x32c>)
 800249c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249e:	2202      	movs	r2, #2
 80024a0:	4013      	ands	r3, r2
 80024a2:	d100      	bne.n	80024a6 <HAL_RCC_OscConfig+0x31e>
 80024a4:	e0b6      	b.n	8002614 <HAL_RCC_OscConfig+0x48c>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d000      	beq.n	80024b0 <HAL_RCC_OscConfig+0x328>
 80024ae:	e0b1      	b.n	8002614 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e166      	b.n	8002782 <HAL_RCC_OscConfig+0x5fa>
 80024b4:	40021000 	.word	0x40021000
 80024b8:	fffeffff 	.word	0xfffeffff
 80024bc:	fffbffff 	.word	0xfffbffff
 80024c0:	ffff80ff 	.word	0xffff80ff
 80024c4:	ffffc7ff 	.word	0xffffc7ff
 80024c8:	00f42400 	.word	0x00f42400
 80024cc:	20000000 	.word	0x20000000
 80024d0:	20000004 	.word	0x20000004
 80024d4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024d8:	4bac      	ldr	r3, [pc, #688]	; (800278c <HAL_RCC_OscConfig+0x604>)
 80024da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	055b      	lsls	r3, r3, #21
 80024e0:	4013      	ands	r3, r2
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_OscConfig+0x360>
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x362>
 80024e8:	2300      	movs	r3, #0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d011      	beq.n	8002512 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80024ee:	4ba7      	ldr	r3, [pc, #668]	; (800278c <HAL_RCC_OscConfig+0x604>)
 80024f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024f2:	4ba6      	ldr	r3, [pc, #664]	; (800278c <HAL_RCC_OscConfig+0x604>)
 80024f4:	2180      	movs	r1, #128	; 0x80
 80024f6:	0549      	lsls	r1, r1, #21
 80024f8:	430a      	orrs	r2, r1
 80024fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80024fc:	4ba3      	ldr	r3, [pc, #652]	; (800278c <HAL_RCC_OscConfig+0x604>)
 80024fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	055b      	lsls	r3, r3, #21
 8002504:	4013      	ands	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800250a:	231f      	movs	r3, #31
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002512:	4b9f      	ldr	r3, [pc, #636]	; (8002790 <HAL_RCC_OscConfig+0x608>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	4013      	ands	r3, r2
 800251c:	d11a      	bne.n	8002554 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800251e:	4b9c      	ldr	r3, [pc, #624]	; (8002790 <HAL_RCC_OscConfig+0x608>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4b9b      	ldr	r3, [pc, #620]	; (8002790 <HAL_RCC_OscConfig+0x608>)
 8002524:	2180      	movs	r1, #128	; 0x80
 8002526:	0049      	lsls	r1, r1, #1
 8002528:	430a      	orrs	r2, r1
 800252a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800252c:	f7fe fbb6 	bl	8000c9c <HAL_GetTick>
 8002530:	0003      	movs	r3, r0
 8002532:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002536:	f7fe fbb1 	bl	8000c9c <HAL_GetTick>
 800253a:	0002      	movs	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e11c      	b.n	8002782 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002548:	4b91      	ldr	r3, [pc, #580]	; (8002790 <HAL_RCC_OscConfig+0x608>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	4013      	ands	r3, r2
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d106      	bne.n	800256a <HAL_RCC_OscConfig+0x3e2>
 800255c:	4b8b      	ldr	r3, [pc, #556]	; (800278c <HAL_RCC_OscConfig+0x604>)
 800255e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002560:	4b8a      	ldr	r3, [pc, #552]	; (800278c <HAL_RCC_OscConfig+0x604>)
 8002562:	2101      	movs	r1, #1
 8002564:	430a      	orrs	r2, r1
 8002566:	65da      	str	r2, [r3, #92]	; 0x5c
 8002568:	e01c      	b.n	80025a4 <HAL_RCC_OscConfig+0x41c>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b05      	cmp	r3, #5
 8002570:	d10c      	bne.n	800258c <HAL_RCC_OscConfig+0x404>
 8002572:	4b86      	ldr	r3, [pc, #536]	; (800278c <HAL_RCC_OscConfig+0x604>)
 8002574:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002576:	4b85      	ldr	r3, [pc, #532]	; (800278c <HAL_RCC_OscConfig+0x604>)
 8002578:	2104      	movs	r1, #4
 800257a:	430a      	orrs	r2, r1
 800257c:	65da      	str	r2, [r3, #92]	; 0x5c
 800257e:	4b83      	ldr	r3, [pc, #524]	; (800278c <HAL_RCC_OscConfig+0x604>)
 8002580:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002582:	4b82      	ldr	r3, [pc, #520]	; (800278c <HAL_RCC_OscConfig+0x604>)
 8002584:	2101      	movs	r1, #1
 8002586:	430a      	orrs	r2, r1
 8002588:	65da      	str	r2, [r3, #92]	; 0x5c
 800258a:	e00b      	b.n	80025a4 <HAL_RCC_OscConfig+0x41c>
 800258c:	4b7f      	ldr	r3, [pc, #508]	; (800278c <HAL_RCC_OscConfig+0x604>)
 800258e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002590:	4b7e      	ldr	r3, [pc, #504]	; (800278c <HAL_RCC_OscConfig+0x604>)
 8002592:	2101      	movs	r1, #1
 8002594:	438a      	bics	r2, r1
 8002596:	65da      	str	r2, [r3, #92]	; 0x5c
 8002598:	4b7c      	ldr	r3, [pc, #496]	; (800278c <HAL_RCC_OscConfig+0x604>)
 800259a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800259c:	4b7b      	ldr	r3, [pc, #492]	; (800278c <HAL_RCC_OscConfig+0x604>)
 800259e:	2104      	movs	r1, #4
 80025a0:	438a      	bics	r2, r1
 80025a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d014      	beq.n	80025d6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7fe fb76 	bl	8000c9c <HAL_GetTick>
 80025b0:	0003      	movs	r3, r0
 80025b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025b4:	e009      	b.n	80025ca <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b6:	f7fe fb71 	bl	8000c9c <HAL_GetTick>
 80025ba:	0002      	movs	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	4a74      	ldr	r2, [pc, #464]	; (8002794 <HAL_RCC_OscConfig+0x60c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e0db      	b.n	8002782 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ca:	4b70      	ldr	r3, [pc, #448]	; (800278c <HAL_RCC_OscConfig+0x604>)
 80025cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ce:	2202      	movs	r2, #2
 80025d0:	4013      	ands	r3, r2
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x42e>
 80025d4:	e013      	b.n	80025fe <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d6:	f7fe fb61 	bl	8000c9c <HAL_GetTick>
 80025da:	0003      	movs	r3, r0
 80025dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025de:	e009      	b.n	80025f4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e0:	f7fe fb5c 	bl	8000c9c <HAL_GetTick>
 80025e4:	0002      	movs	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	4a6a      	ldr	r2, [pc, #424]	; (8002794 <HAL_RCC_OscConfig+0x60c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e0c6      	b.n	8002782 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025f4:	4b65      	ldr	r3, [pc, #404]	; (800278c <HAL_RCC_OscConfig+0x604>)
 80025f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f8:	2202      	movs	r2, #2
 80025fa:	4013      	ands	r3, r2
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80025fe:	231f      	movs	r3, #31
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d105      	bne.n	8002614 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002608:	4b60      	ldr	r3, [pc, #384]	; (800278c <HAL_RCC_OscConfig+0x604>)
 800260a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800260c:	4b5f      	ldr	r3, [pc, #380]	; (800278c <HAL_RCC_OscConfig+0x604>)
 800260e:	4962      	ldr	r1, [pc, #392]	; (8002798 <HAL_RCC_OscConfig+0x610>)
 8002610:	400a      	ands	r2, r1
 8002612:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d100      	bne.n	800261e <HAL_RCC_OscConfig+0x496>
 800261c:	e0b0      	b.n	8002780 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800261e:	4b5b      	ldr	r3, [pc, #364]	; (800278c <HAL_RCC_OscConfig+0x604>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	2238      	movs	r2, #56	; 0x38
 8002624:	4013      	ands	r3, r2
 8002626:	2b10      	cmp	r3, #16
 8002628:	d100      	bne.n	800262c <HAL_RCC_OscConfig+0x4a4>
 800262a:	e078      	b.n	800271e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d153      	bne.n	80026dc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002634:	4b55      	ldr	r3, [pc, #340]	; (800278c <HAL_RCC_OscConfig+0x604>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b54      	ldr	r3, [pc, #336]	; (800278c <HAL_RCC_OscConfig+0x604>)
 800263a:	4958      	ldr	r1, [pc, #352]	; (800279c <HAL_RCC_OscConfig+0x614>)
 800263c:	400a      	ands	r2, r1
 800263e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7fe fb2c 	bl	8000c9c <HAL_GetTick>
 8002644:	0003      	movs	r3, r0
 8002646:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264a:	f7fe fb27 	bl	8000c9c <HAL_GetTick>
 800264e:	0002      	movs	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e092      	b.n	8002782 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800265c:	4b4b      	ldr	r3, [pc, #300]	; (800278c <HAL_RCC_OscConfig+0x604>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	049b      	lsls	r3, r3, #18
 8002664:	4013      	ands	r3, r2
 8002666:	d1f0      	bne.n	800264a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002668:	4b48      	ldr	r3, [pc, #288]	; (800278c <HAL_RCC_OscConfig+0x604>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4a4c      	ldr	r2, [pc, #304]	; (80027a0 <HAL_RCC_OscConfig+0x618>)
 800266e:	4013      	ands	r3, r2
 8002670:	0019      	movs	r1, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1a      	ldr	r2, [r3, #32]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002680:	021b      	lsls	r3, r3, #8
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	431a      	orrs	r2, r3
 8002690:	4b3e      	ldr	r3, [pc, #248]	; (800278c <HAL_RCC_OscConfig+0x604>)
 8002692:	430a      	orrs	r2, r1
 8002694:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002696:	4b3d      	ldr	r3, [pc, #244]	; (800278c <HAL_RCC_OscConfig+0x604>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	4b3c      	ldr	r3, [pc, #240]	; (800278c <HAL_RCC_OscConfig+0x604>)
 800269c:	2180      	movs	r1, #128	; 0x80
 800269e:	0449      	lsls	r1, r1, #17
 80026a0:	430a      	orrs	r2, r1
 80026a2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80026a4:	4b39      	ldr	r3, [pc, #228]	; (800278c <HAL_RCC_OscConfig+0x604>)
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	4b38      	ldr	r3, [pc, #224]	; (800278c <HAL_RCC_OscConfig+0x604>)
 80026aa:	2180      	movs	r1, #128	; 0x80
 80026ac:	0549      	lsls	r1, r1, #21
 80026ae:	430a      	orrs	r2, r1
 80026b0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b2:	f7fe faf3 	bl	8000c9c <HAL_GetTick>
 80026b6:	0003      	movs	r3, r0
 80026b8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026bc:	f7fe faee 	bl	8000c9c <HAL_GetTick>
 80026c0:	0002      	movs	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e059      	b.n	8002782 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ce:	4b2f      	ldr	r3, [pc, #188]	; (800278c <HAL_RCC_OscConfig+0x604>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	049b      	lsls	r3, r3, #18
 80026d6:	4013      	ands	r3, r2
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x534>
 80026da:	e051      	b.n	8002780 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026dc:	4b2b      	ldr	r3, [pc, #172]	; (800278c <HAL_RCC_OscConfig+0x604>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4b2a      	ldr	r3, [pc, #168]	; (800278c <HAL_RCC_OscConfig+0x604>)
 80026e2:	492e      	ldr	r1, [pc, #184]	; (800279c <HAL_RCC_OscConfig+0x614>)
 80026e4:	400a      	ands	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7fe fad8 	bl	8000c9c <HAL_GetTick>
 80026ec:	0003      	movs	r3, r0
 80026ee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f2:	f7fe fad3 	bl	8000c9c <HAL_GetTick>
 80026f6:	0002      	movs	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e03e      	b.n	8002782 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002704:	4b21      	ldr	r3, [pc, #132]	; (800278c <HAL_RCC_OscConfig+0x604>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	049b      	lsls	r3, r3, #18
 800270c:	4013      	ands	r3, r2
 800270e:	d1f0      	bne.n	80026f2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002710:	4b1e      	ldr	r3, [pc, #120]	; (800278c <HAL_RCC_OscConfig+0x604>)
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	4b1d      	ldr	r3, [pc, #116]	; (800278c <HAL_RCC_OscConfig+0x604>)
 8002716:	4923      	ldr	r1, [pc, #140]	; (80027a4 <HAL_RCC_OscConfig+0x61c>)
 8002718:	400a      	ands	r2, r1
 800271a:	60da      	str	r2, [r3, #12]
 800271c:	e030      	b.n	8002780 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e02b      	b.n	8002782 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800272a:	4b18      	ldr	r3, [pc, #96]	; (800278c <HAL_RCC_OscConfig+0x604>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2203      	movs	r2, #3
 8002734:	401a      	ands	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	429a      	cmp	r2, r3
 800273c:	d11e      	bne.n	800277c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2270      	movs	r2, #112	; 0x70
 8002742:	401a      	ands	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002748:	429a      	cmp	r2, r3
 800274a:	d117      	bne.n	800277c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	23fe      	movs	r3, #254	; 0xfe
 8002750:	01db      	lsls	r3, r3, #7
 8002752:	401a      	ands	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002758:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d10e      	bne.n	800277c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	23f8      	movs	r3, #248	; 0xf8
 8002762:	039b      	lsls	r3, r3, #14
 8002764:	401a      	ands	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800276a:	429a      	cmp	r2, r3
 800276c:	d106      	bne.n	800277c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	0f5b      	lsrs	r3, r3, #29
 8002772:	075a      	lsls	r2, r3, #29
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e000      	b.n	8002782 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	0018      	movs	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	b008      	add	sp, #32
 8002788:	bd80      	pop	{r7, pc}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	40021000 	.word	0x40021000
 8002790:	40007000 	.word	0x40007000
 8002794:	00001388 	.word	0x00001388
 8002798:	efffffff 	.word	0xefffffff
 800279c:	feffffff 	.word	0xfeffffff
 80027a0:	1fc1808c 	.word	0x1fc1808c
 80027a4:	effefffc 	.word	0xeffefffc

080027a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0e9      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027bc:	4b76      	ldr	r3, [pc, #472]	; (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2207      	movs	r2, #7
 80027c2:	4013      	ands	r3, r2
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d91e      	bls.n	8002808 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ca:	4b73      	ldr	r3, [pc, #460]	; (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2207      	movs	r2, #7
 80027d0:	4393      	bics	r3, r2
 80027d2:	0019      	movs	r1, r3
 80027d4:	4b70      	ldr	r3, [pc, #448]	; (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027dc:	f7fe fa5e 	bl	8000c9c <HAL_GetTick>
 80027e0:	0003      	movs	r3, r0
 80027e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027e4:	e009      	b.n	80027fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e6:	f7fe fa59 	bl	8000c9c <HAL_GetTick>
 80027ea:	0002      	movs	r2, r0
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	4a6a      	ldr	r2, [pc, #424]	; (800299c <HAL_RCC_ClockConfig+0x1f4>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e0ca      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027fa:	4b67      	ldr	r3, [pc, #412]	; (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2207      	movs	r2, #7
 8002800:	4013      	ands	r3, r2
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d1ee      	bne.n	80027e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2202      	movs	r2, #2
 800280e:	4013      	ands	r3, r2
 8002810:	d015      	beq.n	800283e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2204      	movs	r2, #4
 8002818:	4013      	ands	r3, r2
 800281a:	d006      	beq.n	800282a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800281c:	4b60      	ldr	r3, [pc, #384]	; (80029a0 <HAL_RCC_ClockConfig+0x1f8>)
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	4b5f      	ldr	r3, [pc, #380]	; (80029a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002822:	21e0      	movs	r1, #224	; 0xe0
 8002824:	01c9      	lsls	r1, r1, #7
 8002826:	430a      	orrs	r2, r1
 8002828:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800282a:	4b5d      	ldr	r3, [pc, #372]	; (80029a0 <HAL_RCC_ClockConfig+0x1f8>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	4a5d      	ldr	r2, [pc, #372]	; (80029a4 <HAL_RCC_ClockConfig+0x1fc>)
 8002830:	4013      	ands	r3, r2
 8002832:	0019      	movs	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	4b59      	ldr	r3, [pc, #356]	; (80029a0 <HAL_RCC_ClockConfig+0x1f8>)
 800283a:	430a      	orrs	r2, r1
 800283c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2201      	movs	r2, #1
 8002844:	4013      	ands	r3, r2
 8002846:	d057      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d107      	bne.n	8002860 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002850:	4b53      	ldr	r3, [pc, #332]	; (80029a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	029b      	lsls	r3, r3, #10
 8002858:	4013      	ands	r3, r2
 800285a:	d12b      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e097      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b02      	cmp	r3, #2
 8002866:	d107      	bne.n	8002878 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002868:	4b4d      	ldr	r3, [pc, #308]	; (80029a0 <HAL_RCC_ClockConfig+0x1f8>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	049b      	lsls	r3, r3, #18
 8002870:	4013      	ands	r3, r2
 8002872:	d11f      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e08b      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d107      	bne.n	8002890 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002880:	4b47      	ldr	r3, [pc, #284]	; (80029a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	2380      	movs	r3, #128	; 0x80
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4013      	ands	r3, r2
 800288a:	d113      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e07f      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b03      	cmp	r3, #3
 8002896:	d106      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002898:	4b41      	ldr	r3, [pc, #260]	; (80029a0 <HAL_RCC_ClockConfig+0x1f8>)
 800289a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289c:	2202      	movs	r2, #2
 800289e:	4013      	ands	r3, r2
 80028a0:	d108      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e074      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a6:	4b3e      	ldr	r3, [pc, #248]	; (80029a0 <HAL_RCC_ClockConfig+0x1f8>)
 80028a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028aa:	2202      	movs	r2, #2
 80028ac:	4013      	ands	r3, r2
 80028ae:	d101      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e06d      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028b4:	4b3a      	ldr	r3, [pc, #232]	; (80029a0 <HAL_RCC_ClockConfig+0x1f8>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2207      	movs	r2, #7
 80028ba:	4393      	bics	r3, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	4b37      	ldr	r3, [pc, #220]	; (80029a0 <HAL_RCC_ClockConfig+0x1f8>)
 80028c4:	430a      	orrs	r2, r1
 80028c6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c8:	f7fe f9e8 	bl	8000c9c <HAL_GetTick>
 80028cc:	0003      	movs	r3, r0
 80028ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d0:	e009      	b.n	80028e6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d2:	f7fe f9e3 	bl	8000c9c <HAL_GetTick>
 80028d6:	0002      	movs	r2, r0
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	4a2f      	ldr	r2, [pc, #188]	; (800299c <HAL_RCC_ClockConfig+0x1f4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e054      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	4b2e      	ldr	r3, [pc, #184]	; (80029a0 <HAL_RCC_ClockConfig+0x1f8>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2238      	movs	r2, #56	; 0x38
 80028ec:	401a      	ands	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d1ec      	bne.n	80028d2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028f8:	4b27      	ldr	r3, [pc, #156]	; (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2207      	movs	r2, #7
 80028fe:	4013      	ands	r3, r2
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d21e      	bcs.n	8002944 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b24      	ldr	r3, [pc, #144]	; (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2207      	movs	r2, #7
 800290c:	4393      	bics	r3, r2
 800290e:	0019      	movs	r1, r3
 8002910:	4b21      	ldr	r3, [pc, #132]	; (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002918:	f7fe f9c0 	bl	8000c9c <HAL_GetTick>
 800291c:	0003      	movs	r3, r0
 800291e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002920:	e009      	b.n	8002936 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002922:	f7fe f9bb 	bl	8000c9c <HAL_GetTick>
 8002926:	0002      	movs	r2, r0
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	4a1b      	ldr	r2, [pc, #108]	; (800299c <HAL_RCC_ClockConfig+0x1f4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e02c      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002936:	4b18      	ldr	r3, [pc, #96]	; (8002998 <HAL_RCC_ClockConfig+0x1f0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2207      	movs	r2, #7
 800293c:	4013      	ands	r3, r2
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d1ee      	bne.n	8002922 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2204      	movs	r2, #4
 800294a:	4013      	ands	r3, r2
 800294c:	d009      	beq.n	8002962 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800294e:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	4a15      	ldr	r2, [pc, #84]	; (80029a8 <HAL_RCC_ClockConfig+0x200>)
 8002954:	4013      	ands	r3, r2
 8002956:	0019      	movs	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <HAL_RCC_ClockConfig+0x1f8>)
 800295e:	430a      	orrs	r2, r1
 8002960:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002962:	f000 f829 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8002966:	0001      	movs	r1, r0
 8002968:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <HAL_RCC_ClockConfig+0x1f8>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	220f      	movs	r2, #15
 8002970:	401a      	ands	r2, r3
 8002972:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <HAL_RCC_ClockConfig+0x204>)
 8002974:	0092      	lsls	r2, r2, #2
 8002976:	58d3      	ldr	r3, [r2, r3]
 8002978:	221f      	movs	r2, #31
 800297a:	4013      	ands	r3, r2
 800297c:	000a      	movs	r2, r1
 800297e:	40da      	lsrs	r2, r3
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_RCC_ClockConfig+0x208>)
 8002982:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_RCC_ClockConfig+0x20c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	0018      	movs	r0, r3
 800298a:	f7fe f92b 	bl	8000be4 <HAL_InitTick>
 800298e:	0003      	movs	r3, r0
}
 8002990:	0018      	movs	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	b004      	add	sp, #16
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40022000 	.word	0x40022000
 800299c:	00001388 	.word	0x00001388
 80029a0:	40021000 	.word	0x40021000
 80029a4:	fffff0ff 	.word	0xfffff0ff
 80029a8:	ffff8fff 	.word	0xffff8fff
 80029ac:	080038c4 	.word	0x080038c4
 80029b0:	20000000 	.word	0x20000000
 80029b4:	20000004 	.word	0x20000004

080029b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029be:	4b3c      	ldr	r3, [pc, #240]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2238      	movs	r2, #56	; 0x38
 80029c4:	4013      	ands	r3, r2
 80029c6:	d10f      	bne.n	80029e8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80029c8:	4b39      	ldr	r3, [pc, #228]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	0adb      	lsrs	r3, r3, #11
 80029ce:	2207      	movs	r2, #7
 80029d0:	4013      	ands	r3, r2
 80029d2:	2201      	movs	r2, #1
 80029d4:	409a      	lsls	r2, r3
 80029d6:	0013      	movs	r3, r2
 80029d8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80029da:	6839      	ldr	r1, [r7, #0]
 80029dc:	4835      	ldr	r0, [pc, #212]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80029de:	f7fd fb8f 	bl	8000100 <__udivsi3>
 80029e2:	0003      	movs	r3, r0
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	e05d      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029e8:	4b31      	ldr	r3, [pc, #196]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2238      	movs	r2, #56	; 0x38
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d102      	bne.n	80029fa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029f4:	4b30      	ldr	r3, [pc, #192]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x100>)
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	e054      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029fa:	4b2d      	ldr	r3, [pc, #180]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2238      	movs	r2, #56	; 0x38
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b10      	cmp	r3, #16
 8002a04:	d138      	bne.n	8002a78 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002a06:	4b2a      	ldr	r3, [pc, #168]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a10:	4b27      	ldr	r3, [pc, #156]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	2207      	movs	r2, #7
 8002a18:	4013      	ands	r3, r2
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d10d      	bne.n	8002a40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	4824      	ldr	r0, [pc, #144]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a28:	f7fd fb6a 	bl	8000100 <__udivsi3>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	0019      	movs	r1, r3
 8002a30:	4b1f      	ldr	r3, [pc, #124]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	0a1b      	lsrs	r3, r3, #8
 8002a36:	227f      	movs	r2, #127	; 0x7f
 8002a38:	4013      	ands	r3, r2
 8002a3a:	434b      	muls	r3, r1
 8002a3c:	617b      	str	r3, [r7, #20]
        break;
 8002a3e:	e00d      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	481c      	ldr	r0, [pc, #112]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a44:	f7fd fb5c 	bl	8000100 <__udivsi3>
 8002a48:	0003      	movs	r3, r0
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	0a1b      	lsrs	r3, r3, #8
 8002a52:	227f      	movs	r2, #127	; 0x7f
 8002a54:	4013      	ands	r3, r2
 8002a56:	434b      	muls	r3, r1
 8002a58:	617b      	str	r3, [r7, #20]
        break;
 8002a5a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002a5c:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	0f5b      	lsrs	r3, r3, #29
 8002a62:	2207      	movs	r2, #7
 8002a64:	4013      	ands	r3, r2
 8002a66:	3301      	adds	r3, #1
 8002a68:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	6978      	ldr	r0, [r7, #20]
 8002a6e:	f7fd fb47 	bl	8000100 <__udivsi3>
 8002a72:	0003      	movs	r3, r0
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	e015      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a78:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2238      	movs	r2, #56	; 0x38
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b20      	cmp	r3, #32
 8002a82:	d103      	bne.n	8002a8c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002a84:	2380      	movs	r3, #128	; 0x80
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	e00b      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a8c:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2238      	movs	r2, #56	; 0x38
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b18      	cmp	r3, #24
 8002a96:	d103      	bne.n	8002aa0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002a98:	23fa      	movs	r3, #250	; 0xfa
 8002a9a:	01db      	lsls	r3, r3, #7
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	e001      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002aa4:	693b      	ldr	r3, [r7, #16]
}
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b006      	add	sp, #24
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	00f42400 	.word	0x00f42400
 8002ab8:	007a1200 	.word	0x007a1200

08002abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e04a      	b.n	8002b64 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	223d      	movs	r2, #61	; 0x3d
 8002ad2:	5c9b      	ldrb	r3, [r3, r2]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d107      	bne.n	8002aea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	223c      	movs	r2, #60	; 0x3c
 8002ade:	2100      	movs	r1, #0
 8002ae0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f7fd fef9 	bl	80008dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	223d      	movs	r2, #61	; 0x3d
 8002aee:	2102      	movs	r1, #2
 8002af0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3304      	adds	r3, #4
 8002afa:	0019      	movs	r1, r3
 8002afc:	0010      	movs	r0, r2
 8002afe:	f000 fa6b 	bl	8002fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2248      	movs	r2, #72	; 0x48
 8002b06:	2101      	movs	r1, #1
 8002b08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	223e      	movs	r2, #62	; 0x3e
 8002b0e:	2101      	movs	r1, #1
 8002b10:	5499      	strb	r1, [r3, r2]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	223f      	movs	r2, #63	; 0x3f
 8002b16:	2101      	movs	r1, #1
 8002b18:	5499      	strb	r1, [r3, r2]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2240      	movs	r2, #64	; 0x40
 8002b1e:	2101      	movs	r1, #1
 8002b20:	5499      	strb	r1, [r3, r2]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2241      	movs	r2, #65	; 0x41
 8002b26:	2101      	movs	r1, #1
 8002b28:	5499      	strb	r1, [r3, r2]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2242      	movs	r2, #66	; 0x42
 8002b2e:	2101      	movs	r1, #1
 8002b30:	5499      	strb	r1, [r3, r2]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2243      	movs	r2, #67	; 0x43
 8002b36:	2101      	movs	r1, #1
 8002b38:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2244      	movs	r2, #68	; 0x44
 8002b3e:	2101      	movs	r1, #1
 8002b40:	5499      	strb	r1, [r3, r2]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2245      	movs	r2, #69	; 0x45
 8002b46:	2101      	movs	r1, #1
 8002b48:	5499      	strb	r1, [r3, r2]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2246      	movs	r2, #70	; 0x46
 8002b4e:	2101      	movs	r1, #1
 8002b50:	5499      	strb	r1, [r3, r2]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2247      	movs	r2, #71	; 0x47
 8002b56:	2101      	movs	r1, #1
 8002b58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	223d      	movs	r2, #61	; 0x3d
 8002b5e:	2101      	movs	r1, #1
 8002b60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b002      	add	sp, #8
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e04a      	b.n	8002c14 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	223d      	movs	r2, #61	; 0x3d
 8002b82:	5c9b      	ldrb	r3, [r3, r2]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d107      	bne.n	8002b9a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	223c      	movs	r2, #60	; 0x3c
 8002b8e:	2100      	movs	r1, #0
 8002b90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	0018      	movs	r0, r3
 8002b96:	f000 f841 	bl	8002c1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	223d      	movs	r2, #61	; 0x3d
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	0019      	movs	r1, r3
 8002bac:	0010      	movs	r0, r2
 8002bae:	f000 fa13 	bl	8002fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2248      	movs	r2, #72	; 0x48
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	223e      	movs	r2, #62	; 0x3e
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	5499      	strb	r1, [r3, r2]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	223f      	movs	r2, #63	; 0x3f
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	5499      	strb	r1, [r3, r2]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2240      	movs	r2, #64	; 0x40
 8002bce:	2101      	movs	r1, #1
 8002bd0:	5499      	strb	r1, [r3, r2]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2241      	movs	r2, #65	; 0x41
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	5499      	strb	r1, [r3, r2]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2242      	movs	r2, #66	; 0x42
 8002bde:	2101      	movs	r1, #1
 8002be0:	5499      	strb	r1, [r3, r2]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2243      	movs	r2, #67	; 0x43
 8002be6:	2101      	movs	r1, #1
 8002be8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2244      	movs	r2, #68	; 0x44
 8002bee:	2101      	movs	r1, #1
 8002bf0:	5499      	strb	r1, [r3, r2]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2245      	movs	r2, #69	; 0x45
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	5499      	strb	r1, [r3, r2]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2246      	movs	r2, #70	; 0x46
 8002bfe:	2101      	movs	r1, #1
 8002c00:	5499      	strb	r1, [r3, r2]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2247      	movs	r2, #71	; 0x47
 8002c06:	2101      	movs	r1, #1
 8002c08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	223d      	movs	r2, #61	; 0x3d
 8002c0e:	2101      	movs	r1, #1
 8002c10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	0018      	movs	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b002      	add	sp, #8
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b002      	add	sp, #8
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c38:	2317      	movs	r3, #23
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	223c      	movs	r2, #60	; 0x3c
 8002c44:	5c9b      	ldrb	r3, [r3, r2]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_TIM_PWM_ConfigChannel+0x22>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e0e5      	b.n	8002e1a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	223c      	movs	r2, #60	; 0x3c
 8002c52:	2101      	movs	r1, #1
 8002c54:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b14      	cmp	r3, #20
 8002c5a:	d900      	bls.n	8002c5e <HAL_TIM_PWM_ConfigChannel+0x32>
 8002c5c:	e0d1      	b.n	8002e02 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	009a      	lsls	r2, r3, #2
 8002c62:	4b70      	ldr	r3, [pc, #448]	; (8002e24 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002c64:	18d3      	adds	r3, r2, r3
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	0011      	movs	r1, r2
 8002c72:	0018      	movs	r0, r3
 8002c74:	f000 fa26 	bl	80030c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2108      	movs	r1, #8
 8002c84:	430a      	orrs	r2, r1
 8002c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2104      	movs	r1, #4
 8002c94:	438a      	bics	r2, r1
 8002c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6999      	ldr	r1, [r3, #24]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	691a      	ldr	r2, [r3, #16]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	619a      	str	r2, [r3, #24]
      break;
 8002caa:	e0af      	b.n	8002e0c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	0011      	movs	r1, r2
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f000 fa8f 	bl	80031d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699a      	ldr	r2, [r3, #24]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2180      	movs	r1, #128	; 0x80
 8002cc6:	0109      	lsls	r1, r1, #4
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699a      	ldr	r2, [r3, #24]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4954      	ldr	r1, [pc, #336]	; (8002e28 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002cd8:	400a      	ands	r2, r1
 8002cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6999      	ldr	r1, [r3, #24]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	021a      	lsls	r2, r3, #8
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	619a      	str	r2, [r3, #24]
      break;
 8002cf0:	e08c      	b.n	8002e0c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	0011      	movs	r1, r2
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f000 faf0 	bl	80032e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	69da      	ldr	r2, [r3, #28]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2108      	movs	r1, #8
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2104      	movs	r1, #4
 8002d1c:	438a      	bics	r2, r1
 8002d1e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69d9      	ldr	r1, [r3, #28]
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	691a      	ldr	r2, [r3, #16]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	61da      	str	r2, [r3, #28]
      break;
 8002d32:	e06b      	b.n	8002e0c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f000 fb57 	bl	80033f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	69da      	ldr	r2, [r3, #28]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2180      	movs	r1, #128	; 0x80
 8002d4e:	0109      	lsls	r1, r1, #4
 8002d50:	430a      	orrs	r2, r1
 8002d52:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	69da      	ldr	r2, [r3, #28]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4932      	ldr	r1, [pc, #200]	; (8002e28 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002d60:	400a      	ands	r2, r1
 8002d62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	69d9      	ldr	r1, [r3, #28]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	021a      	lsls	r2, r3, #8
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	61da      	str	r2, [r3, #28]
      break;
 8002d78:	e048      	b.n	8002e0c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	0011      	movs	r1, r2
 8002d82:	0018      	movs	r0, r3
 8002d84:	f000 fb9e 	bl	80034c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2108      	movs	r1, #8
 8002d94:	430a      	orrs	r2, r1
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2104      	movs	r1, #4
 8002da4:	438a      	bics	r2, r1
 8002da6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002dba:	e027      	b.n	8002e0c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	0011      	movs	r1, r2
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f000 fbdd 	bl	8003584 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2180      	movs	r1, #128	; 0x80
 8002dd6:	0109      	lsls	r1, r1, #4
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4910      	ldr	r1, [pc, #64]	; (8002e28 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002de8:	400a      	ands	r2, r1
 8002dea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	021a      	lsls	r2, r3, #8
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e00:	e004      	b.n	8002e0c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002e02:	2317      	movs	r3, #23
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
      break;
 8002e0a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	223c      	movs	r2, #60	; 0x3c
 8002e10:	2100      	movs	r1, #0
 8002e12:	5499      	strb	r1, [r3, r2]

  return status;
 8002e14:	2317      	movs	r3, #23
 8002e16:	18fb      	adds	r3, r7, r3
 8002e18:	781b      	ldrb	r3, [r3, #0]
}
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	b006      	add	sp, #24
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	08003904 	.word	0x08003904
 8002e28:	fffffbff 	.word	0xfffffbff

08002e2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e36:	230f      	movs	r3, #15
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	223c      	movs	r2, #60	; 0x3c
 8002e42:	5c9b      	ldrb	r3, [r3, r2]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_TIM_ConfigClockSource+0x20>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e0bc      	b.n	8002fc6 <HAL_TIM_ConfigClockSource+0x19a>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	223c      	movs	r2, #60	; 0x3c
 8002e50:	2101      	movs	r1, #1
 8002e52:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	223d      	movs	r2, #61	; 0x3d
 8002e58:	2102      	movs	r1, #2
 8002e5a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4a5a      	ldr	r2, [pc, #360]	; (8002fd0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	4a59      	ldr	r2, [pc, #356]	; (8002fd4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2280      	movs	r2, #128	; 0x80
 8002e82:	0192      	lsls	r2, r2, #6
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d040      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0xde>
 8002e88:	2280      	movs	r2, #128	; 0x80
 8002e8a:	0192      	lsls	r2, r2, #6
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d900      	bls.n	8002e92 <HAL_TIM_ConfigClockSource+0x66>
 8002e90:	e088      	b.n	8002fa4 <HAL_TIM_ConfigClockSource+0x178>
 8002e92:	2280      	movs	r2, #128	; 0x80
 8002e94:	0152      	lsls	r2, r2, #5
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d100      	bne.n	8002e9c <HAL_TIM_ConfigClockSource+0x70>
 8002e9a:	e088      	b.n	8002fae <HAL_TIM_ConfigClockSource+0x182>
 8002e9c:	2280      	movs	r2, #128	; 0x80
 8002e9e:	0152      	lsls	r2, r2, #5
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d900      	bls.n	8002ea6 <HAL_TIM_ConfigClockSource+0x7a>
 8002ea4:	e07e      	b.n	8002fa4 <HAL_TIM_ConfigClockSource+0x178>
 8002ea6:	2b70      	cmp	r3, #112	; 0x70
 8002ea8:	d018      	beq.n	8002edc <HAL_TIM_ConfigClockSource+0xb0>
 8002eaa:	d900      	bls.n	8002eae <HAL_TIM_ConfigClockSource+0x82>
 8002eac:	e07a      	b.n	8002fa4 <HAL_TIM_ConfigClockSource+0x178>
 8002eae:	2b60      	cmp	r3, #96	; 0x60
 8002eb0:	d04f      	beq.n	8002f52 <HAL_TIM_ConfigClockSource+0x126>
 8002eb2:	d900      	bls.n	8002eb6 <HAL_TIM_ConfigClockSource+0x8a>
 8002eb4:	e076      	b.n	8002fa4 <HAL_TIM_ConfigClockSource+0x178>
 8002eb6:	2b50      	cmp	r3, #80	; 0x50
 8002eb8:	d03b      	beq.n	8002f32 <HAL_TIM_ConfigClockSource+0x106>
 8002eba:	d900      	bls.n	8002ebe <HAL_TIM_ConfigClockSource+0x92>
 8002ebc:	e072      	b.n	8002fa4 <HAL_TIM_ConfigClockSource+0x178>
 8002ebe:	2b40      	cmp	r3, #64	; 0x40
 8002ec0:	d057      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0x146>
 8002ec2:	d900      	bls.n	8002ec6 <HAL_TIM_ConfigClockSource+0x9a>
 8002ec4:	e06e      	b.n	8002fa4 <HAL_TIM_ConfigClockSource+0x178>
 8002ec6:	2b30      	cmp	r3, #48	; 0x30
 8002ec8:	d063      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0x166>
 8002eca:	d86b      	bhi.n	8002fa4 <HAL_TIM_ConfigClockSource+0x178>
 8002ecc:	2b20      	cmp	r3, #32
 8002ece:	d060      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0x166>
 8002ed0:	d868      	bhi.n	8002fa4 <HAL_TIM_ConfigClockSource+0x178>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d05d      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0x166>
 8002ed6:	2b10      	cmp	r3, #16
 8002ed8:	d05b      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0x166>
 8002eda:	e063      	b.n	8002fa4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6818      	ldr	r0, [r3, #0]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	6899      	ldr	r1, [r3, #8]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f000 fc2a 	bl	8003744 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2277      	movs	r2, #119	; 0x77
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	609a      	str	r2, [r3, #8]
      break;
 8002f08:	e052      	b.n	8002fb0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6899      	ldr	r1, [r3, #8]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f000 fc13 	bl	8003744 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2180      	movs	r1, #128	; 0x80
 8002f2a:	01c9      	lsls	r1, r1, #7
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	609a      	str	r2, [r3, #8]
      break;
 8002f30:	e03e      	b.n	8002fb0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6859      	ldr	r1, [r3, #4]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	001a      	movs	r2, r3
 8002f40:	f000 fb84 	bl	800364c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2150      	movs	r1, #80	; 0x50
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f000 fbde 	bl	800370c <TIM_ITRx_SetConfig>
      break;
 8002f50:	e02e      	b.n	8002fb0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	6859      	ldr	r1, [r3, #4]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	001a      	movs	r2, r3
 8002f60:	f000 fba2 	bl	80036a8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2160      	movs	r1, #96	; 0x60
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f000 fbce 	bl	800370c <TIM_ITRx_SetConfig>
      break;
 8002f70:	e01e      	b.n	8002fb0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6818      	ldr	r0, [r3, #0]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	6859      	ldr	r1, [r3, #4]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	001a      	movs	r2, r3
 8002f80:	f000 fb64 	bl	800364c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2140      	movs	r1, #64	; 0x40
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f000 fbbe 	bl	800370c <TIM_ITRx_SetConfig>
      break;
 8002f90:	e00e      	b.n	8002fb0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	0010      	movs	r0, r2
 8002f9e:	f000 fbb5 	bl	800370c <TIM_ITRx_SetConfig>
      break;
 8002fa2:	e005      	b.n	8002fb0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002fa4:	230f      	movs	r3, #15
 8002fa6:	18fb      	adds	r3, r7, r3
 8002fa8:	2201      	movs	r2, #1
 8002faa:	701a      	strb	r2, [r3, #0]
      break;
 8002fac:	e000      	b.n	8002fb0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002fae:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	223d      	movs	r2, #61	; 0x3d
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	223c      	movs	r2, #60	; 0x3c
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	5499      	strb	r1, [r3, r2]

  return status;
 8002fc0:	230f      	movs	r3, #15
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	781b      	ldrb	r3, [r3, #0]
}
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	b004      	add	sp, #16
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	ffceff88 	.word	0xffceff88
 8002fd4:	ffff00ff 	.word	0xffff00ff

08002fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a2f      	ldr	r2, [pc, #188]	; (80030a8 <TIM_Base_SetConfig+0xd0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d003      	beq.n	8002ff8 <TIM_Base_SetConfig+0x20>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a2e      	ldr	r2, [pc, #184]	; (80030ac <TIM_Base_SetConfig+0xd4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d108      	bne.n	800300a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2270      	movs	r2, #112	; 0x70
 8002ffc:	4393      	bics	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a26      	ldr	r2, [pc, #152]	; (80030a8 <TIM_Base_SetConfig+0xd0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d013      	beq.n	800303a <TIM_Base_SetConfig+0x62>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a25      	ldr	r2, [pc, #148]	; (80030ac <TIM_Base_SetConfig+0xd4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00f      	beq.n	800303a <TIM_Base_SetConfig+0x62>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a24      	ldr	r2, [pc, #144]	; (80030b0 <TIM_Base_SetConfig+0xd8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00b      	beq.n	800303a <TIM_Base_SetConfig+0x62>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a23      	ldr	r2, [pc, #140]	; (80030b4 <TIM_Base_SetConfig+0xdc>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d007      	beq.n	800303a <TIM_Base_SetConfig+0x62>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a22      	ldr	r2, [pc, #136]	; (80030b8 <TIM_Base_SetConfig+0xe0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d003      	beq.n	800303a <TIM_Base_SetConfig+0x62>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a21      	ldr	r2, [pc, #132]	; (80030bc <TIM_Base_SetConfig+0xe4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d108      	bne.n	800304c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4a20      	ldr	r2, [pc, #128]	; (80030c0 <TIM_Base_SetConfig+0xe8>)
 800303e:	4013      	ands	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	4313      	orrs	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2280      	movs	r2, #128	; 0x80
 8003050:	4393      	bics	r3, r2
 8003052:	001a      	movs	r2, r3
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a0c      	ldr	r2, [pc, #48]	; (80030a8 <TIM_Base_SetConfig+0xd0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00b      	beq.n	8003092 <TIM_Base_SetConfig+0xba>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a0d      	ldr	r2, [pc, #52]	; (80030b4 <TIM_Base_SetConfig+0xdc>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d007      	beq.n	8003092 <TIM_Base_SetConfig+0xba>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a0c      	ldr	r2, [pc, #48]	; (80030b8 <TIM_Base_SetConfig+0xe0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d003      	beq.n	8003092 <TIM_Base_SetConfig+0xba>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a0b      	ldr	r2, [pc, #44]	; (80030bc <TIM_Base_SetConfig+0xe4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d103      	bne.n	800309a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	615a      	str	r2, [r3, #20]
}
 80030a0:	46c0      	nop			; (mov r8, r8)
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b004      	add	sp, #16
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40012c00 	.word	0x40012c00
 80030ac:	40000400 	.word	0x40000400
 80030b0:	40002000 	.word	0x40002000
 80030b4:	40014000 	.word	0x40014000
 80030b8:	40014400 	.word	0x40014400
 80030bc:	40014800 	.word	0x40014800
 80030c0:	fffffcff 	.word	0xfffffcff

080030c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	2201      	movs	r2, #1
 80030d4:	4393      	bics	r3, r2
 80030d6:	001a      	movs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4a32      	ldr	r2, [pc, #200]	; (80031bc <TIM_OC1_SetConfig+0xf8>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2203      	movs	r2, #3
 80030fa:	4393      	bics	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	4313      	orrs	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	2202      	movs	r2, #2
 800310c:	4393      	bics	r3, r2
 800310e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a28      	ldr	r2, [pc, #160]	; (80031c0 <TIM_OC1_SetConfig+0xfc>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00b      	beq.n	800313a <TIM_OC1_SetConfig+0x76>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a27      	ldr	r2, [pc, #156]	; (80031c4 <TIM_OC1_SetConfig+0x100>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d007      	beq.n	800313a <TIM_OC1_SetConfig+0x76>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a26      	ldr	r2, [pc, #152]	; (80031c8 <TIM_OC1_SetConfig+0x104>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d003      	beq.n	800313a <TIM_OC1_SetConfig+0x76>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a25      	ldr	r2, [pc, #148]	; (80031cc <TIM_OC1_SetConfig+0x108>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d10c      	bne.n	8003154 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2208      	movs	r2, #8
 800313e:	4393      	bics	r3, r2
 8003140:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4313      	orrs	r3, r2
 800314a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2204      	movs	r2, #4
 8003150:	4393      	bics	r3, r2
 8003152:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a1a      	ldr	r2, [pc, #104]	; (80031c0 <TIM_OC1_SetConfig+0xfc>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00b      	beq.n	8003174 <TIM_OC1_SetConfig+0xb0>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a19      	ldr	r2, [pc, #100]	; (80031c4 <TIM_OC1_SetConfig+0x100>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d007      	beq.n	8003174 <TIM_OC1_SetConfig+0xb0>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a18      	ldr	r2, [pc, #96]	; (80031c8 <TIM_OC1_SetConfig+0x104>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d003      	beq.n	8003174 <TIM_OC1_SetConfig+0xb0>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a17      	ldr	r2, [pc, #92]	; (80031cc <TIM_OC1_SetConfig+0x108>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d111      	bne.n	8003198 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4a16      	ldr	r2, [pc, #88]	; (80031d0 <TIM_OC1_SetConfig+0x10c>)
 8003178:	4013      	ands	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4a15      	ldr	r2, [pc, #84]	; (80031d4 <TIM_OC1_SetConfig+0x110>)
 8003180:	4013      	ands	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	621a      	str	r2, [r3, #32]
}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b006      	add	sp, #24
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	fffeff8f 	.word	0xfffeff8f
 80031c0:	40012c00 	.word	0x40012c00
 80031c4:	40014000 	.word	0x40014000
 80031c8:	40014400 	.word	0x40014400
 80031cc:	40014800 	.word	0x40014800
 80031d0:	fffffeff 	.word	0xfffffeff
 80031d4:	fffffdff 	.word	0xfffffdff

080031d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	2210      	movs	r2, #16
 80031e8:	4393      	bics	r3, r2
 80031ea:	001a      	movs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4a2e      	ldr	r2, [pc, #184]	; (80032c0 <TIM_OC2_SetConfig+0xe8>)
 8003206:	4013      	ands	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4a2d      	ldr	r2, [pc, #180]	; (80032c4 <TIM_OC2_SetConfig+0xec>)
 800320e:	4013      	ands	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	021b      	lsls	r3, r3, #8
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2220      	movs	r2, #32
 8003222:	4393      	bics	r3, r2
 8003224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	4313      	orrs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a24      	ldr	r2, [pc, #144]	; (80032c8 <TIM_OC2_SetConfig+0xf0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d10d      	bne.n	8003256 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2280      	movs	r2, #128	; 0x80
 800323e:	4393      	bics	r3, r2
 8003240:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	4313      	orrs	r3, r2
 800324c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2240      	movs	r2, #64	; 0x40
 8003252:	4393      	bics	r3, r2
 8003254:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a1b      	ldr	r2, [pc, #108]	; (80032c8 <TIM_OC2_SetConfig+0xf0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d00b      	beq.n	8003276 <TIM_OC2_SetConfig+0x9e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a1a      	ldr	r2, [pc, #104]	; (80032cc <TIM_OC2_SetConfig+0xf4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d007      	beq.n	8003276 <TIM_OC2_SetConfig+0x9e>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a19      	ldr	r2, [pc, #100]	; (80032d0 <TIM_OC2_SetConfig+0xf8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d003      	beq.n	8003276 <TIM_OC2_SetConfig+0x9e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a18      	ldr	r2, [pc, #96]	; (80032d4 <TIM_OC2_SetConfig+0xfc>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d113      	bne.n	800329e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4a17      	ldr	r2, [pc, #92]	; (80032d8 <TIM_OC2_SetConfig+0x100>)
 800327a:	4013      	ands	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4a16      	ldr	r2, [pc, #88]	; (80032dc <TIM_OC2_SetConfig+0x104>)
 8003282:	4013      	ands	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	621a      	str	r2, [r3, #32]
}
 80032b8:	46c0      	nop			; (mov r8, r8)
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b006      	add	sp, #24
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	feff8fff 	.word	0xfeff8fff
 80032c4:	fffffcff 	.word	0xfffffcff
 80032c8:	40012c00 	.word	0x40012c00
 80032cc:	40014000 	.word	0x40014000
 80032d0:	40014400 	.word	0x40014400
 80032d4:	40014800 	.word	0x40014800
 80032d8:	fffffbff 	.word	0xfffffbff
 80032dc:	fffff7ff 	.word	0xfffff7ff

080032e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	4a35      	ldr	r2, [pc, #212]	; (80033c4 <TIM_OC3_SetConfig+0xe4>)
 80032f0:	401a      	ands	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4a2f      	ldr	r2, [pc, #188]	; (80033c8 <TIM_OC3_SetConfig+0xe8>)
 800330c:	4013      	ands	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2203      	movs	r2, #3
 8003314:	4393      	bics	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	4a29      	ldr	r2, [pc, #164]	; (80033cc <TIM_OC3_SetConfig+0xec>)
 8003326:	4013      	ands	r3, r2
 8003328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	4313      	orrs	r3, r2
 8003334:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a25      	ldr	r2, [pc, #148]	; (80033d0 <TIM_OC3_SetConfig+0xf0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d10d      	bne.n	800335a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	4a24      	ldr	r2, [pc, #144]	; (80033d4 <TIM_OC3_SetConfig+0xf4>)
 8003342:	4013      	ands	r3, r2
 8003344:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	021b      	lsls	r3, r3, #8
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	4a20      	ldr	r2, [pc, #128]	; (80033d8 <TIM_OC3_SetConfig+0xf8>)
 8003356:	4013      	ands	r3, r2
 8003358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a1c      	ldr	r2, [pc, #112]	; (80033d0 <TIM_OC3_SetConfig+0xf0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d00b      	beq.n	800337a <TIM_OC3_SetConfig+0x9a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a1d      	ldr	r2, [pc, #116]	; (80033dc <TIM_OC3_SetConfig+0xfc>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d007      	beq.n	800337a <TIM_OC3_SetConfig+0x9a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a1c      	ldr	r2, [pc, #112]	; (80033e0 <TIM_OC3_SetConfig+0x100>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d003      	beq.n	800337a <TIM_OC3_SetConfig+0x9a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a1b      	ldr	r2, [pc, #108]	; (80033e4 <TIM_OC3_SetConfig+0x104>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d113      	bne.n	80033a2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4a1a      	ldr	r2, [pc, #104]	; (80033e8 <TIM_OC3_SetConfig+0x108>)
 800337e:	4013      	ands	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4a19      	ldr	r2, [pc, #100]	; (80033ec <TIM_OC3_SetConfig+0x10c>)
 8003386:	4013      	ands	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	621a      	str	r2, [r3, #32]
}
 80033bc:	46c0      	nop			; (mov r8, r8)
 80033be:	46bd      	mov	sp, r7
 80033c0:	b006      	add	sp, #24
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	fffffeff 	.word	0xfffffeff
 80033c8:	fffeff8f 	.word	0xfffeff8f
 80033cc:	fffffdff 	.word	0xfffffdff
 80033d0:	40012c00 	.word	0x40012c00
 80033d4:	fffff7ff 	.word	0xfffff7ff
 80033d8:	fffffbff 	.word	0xfffffbff
 80033dc:	40014000 	.word	0x40014000
 80033e0:	40014400 	.word	0x40014400
 80033e4:	40014800 	.word	0x40014800
 80033e8:	ffffefff 	.word	0xffffefff
 80033ec:	ffffdfff 	.word	0xffffdfff

080033f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	4a28      	ldr	r2, [pc, #160]	; (80034a0 <TIM_OC4_SetConfig+0xb0>)
 8003400:	401a      	ands	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4a22      	ldr	r2, [pc, #136]	; (80034a4 <TIM_OC4_SetConfig+0xb4>)
 800341c:	4013      	ands	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4a21      	ldr	r2, [pc, #132]	; (80034a8 <TIM_OC4_SetConfig+0xb8>)
 8003424:	4013      	ands	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	021b      	lsls	r3, r3, #8
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4313      	orrs	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4a1d      	ldr	r2, [pc, #116]	; (80034ac <TIM_OC4_SetConfig+0xbc>)
 8003438:	4013      	ands	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	031b      	lsls	r3, r3, #12
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a19      	ldr	r2, [pc, #100]	; (80034b0 <TIM_OC4_SetConfig+0xc0>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d00b      	beq.n	8003468 <TIM_OC4_SetConfig+0x78>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a18      	ldr	r2, [pc, #96]	; (80034b4 <TIM_OC4_SetConfig+0xc4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d007      	beq.n	8003468 <TIM_OC4_SetConfig+0x78>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a17      	ldr	r2, [pc, #92]	; (80034b8 <TIM_OC4_SetConfig+0xc8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d003      	beq.n	8003468 <TIM_OC4_SetConfig+0x78>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a16      	ldr	r2, [pc, #88]	; (80034bc <TIM_OC4_SetConfig+0xcc>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d109      	bne.n	800347c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	4a15      	ldr	r2, [pc, #84]	; (80034c0 <TIM_OC4_SetConfig+0xd0>)
 800346c:	4013      	ands	r3, r2
 800346e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	019b      	lsls	r3, r3, #6
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	621a      	str	r2, [r3, #32]
}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	46bd      	mov	sp, r7
 800349a:	b006      	add	sp, #24
 800349c:	bd80      	pop	{r7, pc}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	ffffefff 	.word	0xffffefff
 80034a4:	feff8fff 	.word	0xfeff8fff
 80034a8:	fffffcff 	.word	0xfffffcff
 80034ac:	ffffdfff 	.word	0xffffdfff
 80034b0:	40012c00 	.word	0x40012c00
 80034b4:	40014000 	.word	0x40014000
 80034b8:	40014400 	.word	0x40014400
 80034bc:	40014800 	.word	0x40014800
 80034c0:	ffffbfff 	.word	0xffffbfff

080034c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	4a25      	ldr	r2, [pc, #148]	; (8003568 <TIM_OC5_SetConfig+0xa4>)
 80034d4:	401a      	ands	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4a1f      	ldr	r2, [pc, #124]	; (800356c <TIM_OC5_SetConfig+0xa8>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	4a1b      	ldr	r2, [pc, #108]	; (8003570 <TIM_OC5_SetConfig+0xac>)
 8003502:	4013      	ands	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	041b      	lsls	r3, r3, #16
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a17      	ldr	r2, [pc, #92]	; (8003574 <TIM_OC5_SetConfig+0xb0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00b      	beq.n	8003532 <TIM_OC5_SetConfig+0x6e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a16      	ldr	r2, [pc, #88]	; (8003578 <TIM_OC5_SetConfig+0xb4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d007      	beq.n	8003532 <TIM_OC5_SetConfig+0x6e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a15      	ldr	r2, [pc, #84]	; (800357c <TIM_OC5_SetConfig+0xb8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d003      	beq.n	8003532 <TIM_OC5_SetConfig+0x6e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a14      	ldr	r2, [pc, #80]	; (8003580 <TIM_OC5_SetConfig+0xbc>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d109      	bne.n	8003546 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	4a0c      	ldr	r2, [pc, #48]	; (8003568 <TIM_OC5_SetConfig+0xa4>)
 8003536:	4013      	ands	r3, r2
 8003538:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	621a      	str	r2, [r3, #32]
}
 8003560:	46c0      	nop			; (mov r8, r8)
 8003562:	46bd      	mov	sp, r7
 8003564:	b006      	add	sp, #24
 8003566:	bd80      	pop	{r7, pc}
 8003568:	fffeffff 	.word	0xfffeffff
 800356c:	fffeff8f 	.word	0xfffeff8f
 8003570:	fffdffff 	.word	0xfffdffff
 8003574:	40012c00 	.word	0x40012c00
 8003578:	40014000 	.word	0x40014000
 800357c:	40014400 	.word	0x40014400
 8003580:	40014800 	.word	0x40014800

08003584 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	4a26      	ldr	r2, [pc, #152]	; (800362c <TIM_OC6_SetConfig+0xa8>)
 8003594:	401a      	ands	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4a20      	ldr	r2, [pc, #128]	; (8003630 <TIM_OC6_SetConfig+0xac>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	021b      	lsls	r3, r3, #8
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4a1c      	ldr	r2, [pc, #112]	; (8003634 <TIM_OC6_SetConfig+0xb0>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	051b      	lsls	r3, r3, #20
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a18      	ldr	r2, [pc, #96]	; (8003638 <TIM_OC6_SetConfig+0xb4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d00b      	beq.n	80035f4 <TIM_OC6_SetConfig+0x70>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a17      	ldr	r2, [pc, #92]	; (800363c <TIM_OC6_SetConfig+0xb8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d007      	beq.n	80035f4 <TIM_OC6_SetConfig+0x70>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a16      	ldr	r2, [pc, #88]	; (8003640 <TIM_OC6_SetConfig+0xbc>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d003      	beq.n	80035f4 <TIM_OC6_SetConfig+0x70>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a15      	ldr	r2, [pc, #84]	; (8003644 <TIM_OC6_SetConfig+0xc0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d109      	bne.n	8003608 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	4a14      	ldr	r2, [pc, #80]	; (8003648 <TIM_OC6_SetConfig+0xc4>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	029b      	lsls	r3, r3, #10
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	621a      	str	r2, [r3, #32]
}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	46bd      	mov	sp, r7
 8003626:	b006      	add	sp, #24
 8003628:	bd80      	pop	{r7, pc}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	ffefffff 	.word	0xffefffff
 8003630:	feff8fff 	.word	0xfeff8fff
 8003634:	ffdfffff 	.word	0xffdfffff
 8003638:	40012c00 	.word	0x40012c00
 800363c:	40014000 	.word	0x40014000
 8003640:	40014400 	.word	0x40014400
 8003644:	40014800 	.word	0x40014800
 8003648:	fffbffff 	.word	0xfffbffff

0800364c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	2201      	movs	r2, #1
 8003664:	4393      	bics	r3, r2
 8003666:	001a      	movs	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	22f0      	movs	r2, #240	; 0xf0
 8003676:	4393      	bics	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	220a      	movs	r2, #10
 8003688:	4393      	bics	r3, r2
 800368a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	621a      	str	r2, [r3, #32]
}
 80036a0:	46c0      	nop			; (mov r8, r8)
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b006      	add	sp, #24
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	2210      	movs	r2, #16
 80036ba:	4393      	bics	r3, r2
 80036bc:	001a      	movs	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	4a0d      	ldr	r2, [pc, #52]	; (8003708 <TIM_TI2_ConfigInputStage+0x60>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	031b      	lsls	r3, r3, #12
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	22a0      	movs	r2, #160	; 0xa0
 80036e4:	4393      	bics	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	621a      	str	r2, [r3, #32]
}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	46bd      	mov	sp, r7
 8003702:	b006      	add	sp, #24
 8003704:	bd80      	pop	{r7, pc}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	ffff0fff 	.word	0xffff0fff

0800370c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4a08      	ldr	r2, [pc, #32]	; (8003740 <TIM_ITRx_SetConfig+0x34>)
 8003720:	4013      	ands	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	2207      	movs	r2, #7
 800372c:	4313      	orrs	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	609a      	str	r2, [r3, #8]
}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	46bd      	mov	sp, r7
 800373a:	b004      	add	sp, #16
 800373c:	bd80      	pop	{r7, pc}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	ffcfff8f 	.word	0xffcfff8f

08003744 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	4a09      	ldr	r2, [pc, #36]	; (8003780 <TIM_ETR_SetConfig+0x3c>)
 800375c:	4013      	ands	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	021a      	lsls	r2, r3, #8
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	431a      	orrs	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4313      	orrs	r3, r2
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	609a      	str	r2, [r3, #8]
}
 8003778:	46c0      	nop			; (mov r8, r8)
 800377a:	46bd      	mov	sp, r7
 800377c:	b006      	add	sp, #24
 800377e:	bd80      	pop	{r7, pc}
 8003780:	ffff00ff 	.word	0xffff00ff

08003784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	223c      	movs	r2, #60	; 0x3c
 8003792:	5c9b      	ldrb	r3, [r3, r2]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003798:	2302      	movs	r3, #2
 800379a:	e04f      	b.n	800383c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	223c      	movs	r2, #60	; 0x3c
 80037a0:	2101      	movs	r1, #1
 80037a2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	223d      	movs	r2, #61	; 0x3d
 80037a8:	2102      	movs	r1, #2
 80037aa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a20      	ldr	r2, [pc, #128]	; (8003844 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d108      	bne.n	80037d8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4a1f      	ldr	r2, [pc, #124]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80037ca:	4013      	ands	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2270      	movs	r2, #112	; 0x70
 80037dc:	4393      	bics	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a13      	ldr	r2, [pc, #76]	; (8003844 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d009      	beq.n	8003810 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a12      	ldr	r2, [pc, #72]	; (800384c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d004      	beq.n	8003810 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a11      	ldr	r2, [pc, #68]	; (8003850 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d10c      	bne.n	800382a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2280      	movs	r2, #128	; 0x80
 8003814:	4393      	bics	r3, r2
 8003816:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	4313      	orrs	r3, r2
 8003820:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	223d      	movs	r2, #61	; 0x3d
 800382e:	2101      	movs	r1, #1
 8003830:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	223c      	movs	r2, #60	; 0x3c
 8003836:	2100      	movs	r1, #0
 8003838:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	0018      	movs	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	b004      	add	sp, #16
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40012c00 	.word	0x40012c00
 8003848:	ff0fffff 	.word	0xff0fffff
 800384c:	40000400 	.word	0x40000400
 8003850:	40014000 	.word	0x40014000

08003854 <__libc_init_array>:
 8003854:	b570      	push	{r4, r5, r6, lr}
 8003856:	2600      	movs	r6, #0
 8003858:	4d0c      	ldr	r5, [pc, #48]	; (800388c <__libc_init_array+0x38>)
 800385a:	4c0d      	ldr	r4, [pc, #52]	; (8003890 <__libc_init_array+0x3c>)
 800385c:	1b64      	subs	r4, r4, r5
 800385e:	10a4      	asrs	r4, r4, #2
 8003860:	42a6      	cmp	r6, r4
 8003862:	d109      	bne.n	8003878 <__libc_init_array+0x24>
 8003864:	2600      	movs	r6, #0
 8003866:	f000 f821 	bl	80038ac <_init>
 800386a:	4d0a      	ldr	r5, [pc, #40]	; (8003894 <__libc_init_array+0x40>)
 800386c:	4c0a      	ldr	r4, [pc, #40]	; (8003898 <__libc_init_array+0x44>)
 800386e:	1b64      	subs	r4, r4, r5
 8003870:	10a4      	asrs	r4, r4, #2
 8003872:	42a6      	cmp	r6, r4
 8003874:	d105      	bne.n	8003882 <__libc_init_array+0x2e>
 8003876:	bd70      	pop	{r4, r5, r6, pc}
 8003878:	00b3      	lsls	r3, r6, #2
 800387a:	58eb      	ldr	r3, [r5, r3]
 800387c:	4798      	blx	r3
 800387e:	3601      	adds	r6, #1
 8003880:	e7ee      	b.n	8003860 <__libc_init_array+0xc>
 8003882:	00b3      	lsls	r3, r6, #2
 8003884:	58eb      	ldr	r3, [r5, r3]
 8003886:	4798      	blx	r3
 8003888:	3601      	adds	r6, #1
 800388a:	e7f2      	b.n	8003872 <__libc_init_array+0x1e>
 800388c:	08003958 	.word	0x08003958
 8003890:	08003958 	.word	0x08003958
 8003894:	08003958 	.word	0x08003958
 8003898:	0800395c 	.word	0x0800395c

0800389c <memset>:
 800389c:	0003      	movs	r3, r0
 800389e:	1882      	adds	r2, r0, r2
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d100      	bne.n	80038a6 <memset+0xa>
 80038a4:	4770      	bx	lr
 80038a6:	7019      	strb	r1, [r3, #0]
 80038a8:	3301      	adds	r3, #1
 80038aa:	e7f9      	b.n	80038a0 <memset+0x4>

080038ac <_init>:
 80038ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038b2:	bc08      	pop	{r3}
 80038b4:	469e      	mov	lr, r3
 80038b6:	4770      	bx	lr

080038b8 <_fini>:
 80038b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038be:	bc08      	pop	{r3}
 80038c0:	469e      	mov	lr, r3
 80038c2:	4770      	bx	lr
